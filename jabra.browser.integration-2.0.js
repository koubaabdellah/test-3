"use strict";var jabra;(function(e){e.apiVersion="2.0.1";const t=e.apiVersion.includes("beta");const r="okpeabepajdgiepelmhkfhkjlhhmofma";const i="igcbbdnhomedfadljgcmcfpdcoonihfe";const n=["devices","activedevice","getinstallinfo","Version","setmmifocus","setactivedevice2","setbusylight","setremotemmilightaction"];let o=["mute","unmute","device attached","device detached","acceptcall","endcall","reject","flash","online","offline","linebusy","lineidle","redial","key0","key1","key2","key3","key4","key5","key6","key7","key8","key9","keyStar","keyPound","keyClear","Online","speedDial","voiceMail","LineBusy","outOfRange","intoRange","pseudoAcceptcall","pseudoEndcall","button1","button2","button3","volumeUp","volumeDown","fireAlarm","jackConnection","jackDisConnection","qdConnection","qdDisconnection","headsetConnection","headsetDisConnection","devlog","busylight","hearThrough","batteryStatus","gnpButton","mmi","error"];let a;(function(e){e[e["NoError"]=0]="NoError";e[e["SSLError"]=1]="SSLError";e[e["CertError"]=2]="CertError";e[e["NetworkError"]=3]="NetworkError";e[e["DownloadError"]=4]="DownloadError";e[e["ParseError"]=5]="ParseError";e[e["OtherError"]=6]="OtherError";e[e["DeviceInfoError"]=7]="DeviceInfoError";e[e["FileNotAccessible"]=8]="FileNotAccessible";e[e["FileNotCompatible"]=9]="FileNotCompatible";e[e["Device_NotFound"]=10]="Device_NotFound";e[e["Parameter_fail"]=11]="Parameter_fail";e[e["Authorization_failed"]=12]="Authorization_failed";e[e["FileNotAvailable"]=13]="FileNotAvailable";e[e["ConfigParseError"]=14]="ConfigParseError";e[e["SetSettings_Fail"]=15]="SetSettings_Fail";e[e["Device_Reboot"]=16]="Device_Reboot";e[e["Device_ReadFail"]=17]="Device_ReadFail";e[e["Device_NotReady"]=18]="Device_NotReady";e[e["FilePartiallyCompatible"]=19]="FilePartiallyCompatible"})(a=e.ErrorCodes||(e.ErrorCodes={}));let s;(function(e){e[e["Return_Ok"]=0]="Return_Ok";e[e["Device_Unknown"]=1]="Device_Unknown";e[e["Device_Invalid"]=2]="Device_Invalid";e[e["Not_Supported"]=3]="Not_Supported";e[e["Return_ParameterFail"]=4]="Return_ParameterFail";e[e["ProtectedSetting_Write"]=5]="ProtectedSetting_Write";e[e["No_Information"]=6]="No_Information";e[e["NetworkRequest_Fail"]=7]="NetworkRequest_Fail";e[e["Device_WriteFail"]=8]="Device_WriteFail";e[e["Device_ReadFails"]=9]="Device_ReadFails";e[e["No_FactorySupported"]=10]="No_FactorySupported";e[e["System_Error"]=11]="System_Error";e[e["Device_BadState"]=12]="Device_BadState";e[e["FileWrite_Fail"]=13]="FileWrite_Fail";e[e["File_AlreadyExists"]=14]="File_AlreadyExists";e[e["File_Not_Accessible"]=15]="File_Not_Accessible";e[e["Firmware_UpToDate"]=16]="Firmware_UpToDate";e[e["Firmware_Available"]=17]="Firmware_Available";e[e["Return_Async"]=18]="Return_Async";e[e["Invalid_Authorization"]=19]="Invalid_Authorization";e[e["FWU_Application_Not_Available"]=20]="FWU_Application_Not_Available";e[e["Device_AlreadyConnected"]=21]="Device_AlreadyConnected";e[e["Device_NotConnected"]=22]="Device_NotConnected";e[e["CannotClear_DeviceConnected"]=23]="CannotClear_DeviceConnected";e[e["Device_Rebooted"]=24]="Device_Rebooted";e[e["Upload_AlreadyInProgress"]=25]="Upload_AlreadyInProgress";e[e["Download_AlreadyInProgress"]=26]="Download_AlreadyInProgress"})(s=e.ErrorReturnCodes||(e.ErrorReturnCodes={}));class CommandError extends Error{constructor(e,t,r){super("Command "+e+" failed with error  message "+t+" and details: "+JSON.stringify(r||{}));this.command=e;this.errmessage=t;this.data=r;this.name="CommandError"}}e.CommandError=CommandError;const l=new Map;o.forEach((e=>l.set(e,[])));let d;(function(e){e[e["BusyLight"]=1e3]="BusyLight";e[e["FactoryReset"]=1001]="FactoryReset";e[e["PairingList"]=1002]="PairingList";e[e["RemoteMMI"]=1003]="RemoteMMI";e[e["MusicEqualizer"]=1004]="MusicEqualizer";e[e["EarbudInterconnectionStatus"]=1005]="EarbudInterconnectionStatus";e[e["StepRate"]=1006]="StepRate";e[e["HeartRate"]=1007]="HeartRate";e[e["RRInterval"]=1008]="RRInterval";e[e["RingtoneUpload"]=1009]="RingtoneUpload";e[e["ImageUpload"]=1010]="ImageUpload";e[e["NeedsExplicitRebootAfterOta"]=1011]="NeedsExplicitRebootAfterOta";e[e["NeedsToBePutIncCradleToCompleteFwu"]=1012]="NeedsToBePutIncCradleToCompleteFwu";e[e["RemoteMMIv2"]=1013]="RemoteMMIv2";e[e["Logging"]=1014]="Logging";e[e["PreferredSoftphoneListInDevice"]=1015]="PreferredSoftphoneListInDevice";e[e["VoiceAssistant"]=1016]="VoiceAssistant";e[e["PlayRingtone"]=1017]="PlayRingtone"})(d=e.DeviceFeature||(e.DeviceFeature={}));let c;(function(e){e[e["MMI_TYPE_MFB"]=0]="MMI_TYPE_MFB";e[e["MMI_TYPE_VOLUP"]=1]="MMI_TYPE_VOLUP";e[e["MMI_TYPE_VOLDOWN"]=2]="MMI_TYPE_VOLDOWN";e[e["MMI_TYPE_VCB"]=3]="MMI_TYPE_VCB";e[e["MMI_TYPE_APP"]=4]="MMI_TYPE_APP";e[e["MMI_TYPE_TR_FORW"]=5]="MMI_TYPE_TR_FORW";e[e["MMI_TYPE_TR_BACK"]=6]="MMI_TYPE_TR_BACK";e[e["MMI_TYPE_PLAY"]=7]="MMI_TYPE_PLAY";e[e["MMI_TYPE_MUTE"]=8]="MMI_TYPE_MUTE";e[e["MMI_TYPE_HOOK_OFF"]=9]="MMI_TYPE_HOOK_OFF";e[e["MMI_TYPE_HOOK_ON"]=10]="MMI_TYPE_HOOK_ON";e[e["MMI_TYPE_BLUETOOTH"]=11]="MMI_TYPE_BLUETOOTH";e[e["MMI_TYPE_JABRA"]=12]="MMI_TYPE_JABRA";e[e["MMI_TYPE_BATTERY"]=13]="MMI_TYPE_BATTERY";e[e["MMI_TYPE_PROG"]=14]="MMI_TYPE_PROG";e[e["MMI_TYPE_LINK"]=15]="MMI_TYPE_LINK";e[e["MMI_TYPE_ANC"]=16]="MMI_TYPE_ANC";e[e["MMI_TYPE_LISTEN_IN"]=17]="MMI_TYPE_LISTEN_IN";e[e["MMI_TYPE_DOT3"]=18]="MMI_TYPE_DOT3";e[e["MMI_TYPE_DOT4"]=19]="MMI_TYPE_DOT4";e[e["MMI_TYPE_ALL"]=255]="MMI_TYPE_ALL"})(c=e.RemoteMmiType||(e.RemoteMmiType={}));let u;(function(e){e[e["MMI_LED_SEQUENCE_OFF"]=0]="MMI_LED_SEQUENCE_OFF";e[e["MMI_LED_SEQUENCE_ON"]=1]="MMI_LED_SEQUENCE_ON";e[e["MMI_LED_SEQUENCE_SLOW"]=2]="MMI_LED_SEQUENCE_SLOW";e[e["MMI_LED_SEQUENCE_FAST"]=3]="MMI_LED_SEQUENCE_FAST"})(u=e.RemoteMmiSequence||(e.RemoteMmiSequence={}));let f;(function(e){e[e["MMI_ACTION_UP"]=1]="MMI_ACTION_UP";e[e["MMI_ACTION_DOWN"]=2]="MMI_ACTION_DOWN";e[e["MMI_ACTION_TAP"]=4]="MMI_ACTION_TAP";e[e["MMI_ACTION_DOUBLE_TAP"]=8]="MMI_ACTION_DOUBLE_TAP";e[e["MMI_ACTION_PRESS"]=16]="MMI_ACTION_PRESS";e[e["MMI_ACTION_LONG_PRESS"]=32]="MMI_ACTION_LONG_PRESS";e[e["MMI_ACTION_X_LONG_PRESS"]=64]="MMI_ACTION_X_LONG_PRESS"})(f=e.RemoteMmiActionInput||(e.RemoteMmiActionInput={}));e.logLevel=2;const g=new class{trace(t){if(e.logLevel>=4){console.log(t)}}info(t){if(e.logLevel>=3){console.log(t)}}warn(t){if(e.logLevel>=2){console.warn(t)}}error(t){if(e.logLevel>=1){console.error(t)}}};const _=Math.random().toString(36).substr(2,9);const m=new Map;let v=1;let I={};function init(){return new Promise(((o,a)=>{let s=/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor);if(!s){return a(new Error("Jabra Browser Integration: Only supported by <a href='https://google.com/chrome'>Google Chrome</a>."))}if(I.initialized||I.initializing){return a(new Error("Jabra Browser Integration already initialized"))}I.initializing=true;m.clear();let d=true;I.eventCallback=t=>{if(t.source===window&&t.data.direction&&t.data.direction==="jabra-headset-extension-from-content-script"){let r=t.data.apiClientId||"";let i=t.data.requestId||"";if(_===r||r===""){g.trace("Receiving event from content script: "+JSON.stringify(t.data));if(t.data.message==="na"){delete t.data.message}if(t.data.message&&t.data.message.startsWith("Error:")){t.data.error=t.data.message;delete t.data.message}if(t.data.message){g.trace("Got message: "+JSON.stringify(t.data));const r=t.data.message.substring(7);if(r.startsWith("logLevel")){e.logLevel=parseInt(t.data.message.substring(16));g.trace("Logger set to level "+e.logLevel);return}const a=n.findIndex((e=>r.startsWith(e)));if(a>=0){if(r==="getinstallinfo"||r.startsWith("Version ")){if(!t.data.data){t.data.data={}}t.data.data.version_jsapi=e.apiVersion}if(r==="getinstallinfo"){t.data.data.installationOk=isInstallationOk(t.data.data)}let o=identifyAndCleanupResultTarget(i);if(o){let e;if(t.data.data){e=t.data.data}else{let t=n[a].length+1;let i=r.substring(t);e={};if(i){e.legacy_result=i}}o.resolve(e)}else{let e="Result target information missing for message "+t.data.message+". This is likely due to some software components that have not been updated or a software bug. Please upgrade extension and/or chromehost";g.error(e);notify("error",{error:e,message:t.data.message})}}else if(l.has(r)){try{const e=JSON.parse(JSON.stringify(t.data));delete e.direction;delete e.apiClientId;delete e.requestId;e.message=r;notify(r,e)}catch(e){notify("error",{error:"Parse failed, the event.data is invalid for JSON.parse() when event listeners contain normalized messsage"})}}else{g.warn("Unknown message: "+t.data.message);notify("error",{error:"Unknown message: ",message:t.data.message});return}if(d){d=false;return o()}}else if(t.data.error){g.error("Got error: "+t.data.error);const e=t.data.error.substring(7);let r=identifyAndCleanupResultTarget(i);if(r){r.reject(new CommandError(r.cmd,e,t.data.data))}else{try{const r=JSON.parse(JSON.stringify(t.data));delete r.direction;delete r.apiClientId;delete r.requestId;r.error=e;notify("error",r)}catch(e){notify("error",{error:"Parse failed, event data is invalid for JSON.parse()"})}}if(d){d=false;return a(new Error(t.data.error))}}}}};window.addEventListener("message",I.eventCallback);setTimeout((()=>{sendCmdWithResult("getversion",null,false).then((e=>{let t=typeof e==="string"||e instanceof String?e:JSON.stringify(e,null,2);g.trace("getversion returned successfully with : "+t);sendCmd("logLevel",null,false)})).catch((e=>{g.error(e)}))}),1e3);setTimeout((function(){if(d===true){d=false;const e=t?i:r;a(new Error("Jabra Browser Integration: You need to use this <a href='https://chrome.google.com/webstore/detail/"+e+"'>Extension</a> and then reload this page"))}}),5e3);function isInstallationOk(e){let t=[e.version_browserextension,e.version_chromehost,e.version_jsapi];if(t.some((e=>!e))||!e.version_nativesdk){return false}if(!t.map((e=>{let t=e.lastIndexOf("beta");if(t>=0&&e.length>t+4){return e.substr(t+4)}else{return undefined}})).filter((e=>e)).every(((e,t,r)=>e===r[0]))){return false}return true}function notify(e,t){let r=l.get(e);if(r){r.forEach((e=>{e(t)}))}else{g.error("Unexpected unknown eventName: "+e)}}function identifyAndCleanupResultTarget(e){let t;if(e){t=m.get(e);m.delete(e)}else if(m.size===1){let e=m.entries().next().value;t=e[1];m.delete(e[0])}else{t=undefined}const r=m.size;if(r>10&&r%10===0){g.warn("Memory leak found - Request result map is getting too large (size #"+r+")")}return t}I.initialized=true;I.initializing=false}))}e.init=init;function shutdown(){if(I.initialized){window.removeEventListener("message",I.eventCallback);I.eventCallback=undefined;m.clear();v=1;I.initialized=false;l.forEach(((e,t)=>{e=[]}));return Promise.resolve()}return Promise.reject(new Error("Browser integration not initialized"))}e.shutdown=shutdown;function getEvents(e){if(Array.isArray(e)){return[...new Set([].concat.apply([],e.map((e=>getEvents(e)))))]}else if(e instanceof RegExp){return Array.from(l.keys()).filter((t=>e.test(t)))}else{if(l.has(e)){return[e]}else{g.warn("Unknown event "+e+" ignored when adding/removing eventlistener")}}return[]}function addEventListener(e,t){getEvents(e).map((e=>{let r=l.get(e);if(!r.find((e=>e===t))){r.push(t)}}))}e.addEventListener=addEventListener;function removeEventListener(e,t){getEvents(e).map((e=>{let r=l.get(e);let i=r.findIndex((e=>e===t));if(i>=0){r.splice(i,1)}}))}e.removeEventListener=removeEventListener;function ring(){sendCmd("ring")}e.ring=ring;function offHook(){sendCmd("offhook")}e.offHook=offHook;function onHook(){sendCmd("onhook")}e.onHook=onHook;function mute(){sendCmd("mute")}e.mute=mute;function unmute(){sendCmd("unmute")}e.unmute=unmute;function hold(){sendCmd("hold")}e.hold=hold;function resume(){sendCmd("resume")}e.resume=resume;function setMmiFocus(e,t){let r=numberOrString(e);let i=booleanOrString(t);return sendCmdWithResult("setmmifocus",{type:r,capture:i})}e.setMmiFocus=setMmiFocus;function setRemoteMmiLightAction(e,t,r){let i=numberOrString(e);let n=colorOrString(t);let o=numberOrString(r);return sendCmdWithResult("setremotemmilightaction",{type:i,color:n,effect:o})}e.setRemoteMmiLightAction=setRemoteMmiLightAction;function _doGetActiveSDKDevice(){return sendCmdWithResult("getactivedevice")}function _doGetSDKDevices(){return sendCmdWithResult("getdevices")}function getActiveDevice(e=false){let t=booleanOrString(e);if(t){return _doGetActiveSDKDevice_And_BrowserDevice()}else{return _doGetActiveSDKDevice()}}e.getActiveDevice=getActiveDevice;function getDevices(e=false){let t=booleanOrString(e);if(t){return _doGetSDKDevices_And_BrowserDevice()}else{return _doGetSDKDevices()}}e.getDevices=getDevices;function _setActiveDeviceId(e){let t=numberOrString(e);sendCmd("setactivedevice "+e.toString(),{id:t})}e._setActiveDeviceId=_setActiveDeviceId;function setActiveDeviceId(e){let t=numberOrString(e);return sendCmdWithResult("setactivedevice2",{id:t})}e.setActiveDeviceId=setActiveDeviceId;function setBusyLight(e){let t=booleanOrString(e);return sendCmdWithResult("setbusylight",{busy:t})}e.setBusyLight=setBusyLight;function getInstallInfo(){return sendCmdWithResult("getinstallinfo")}e.getInstallInfo=getInstallInfo;function sendCmd(t,r=null,i=true){if(!i||i&&I.initialized){let i=(v++).toString();let n={direction:"jabra-headset-extension-from-page-script",message:t,args:r||{},requestId:i,apiClientId:_,version_jsapi:e.apiVersion};g.trace("Sending command to content script: "+JSON.stringify(n));window.postMessage(n,"*")}else{throw new Error("Browser integration not initialized")}}function sendCmdWithResult(t,r=null,i=true){if(!i||i&&I.initialized){let i=(v++).toString();return new Promise(((n,o)=>{m.set(i,{cmd:t,resolve:n,reject:o});let a={direction:"jabra-headset-extension-from-page-script",message:t,args:r||{},requestId:i,apiClientId:_,version_jsapi:e.apiVersion};g.trace("Sending command to content script expecting result: "+JSON.stringify(a));window.postMessage(a,"*")}))}else{return Promise.reject(new Error("Browser integration not initialized"))}}function trySetDeviceOutput(e,t){if(!e||!t){return Promise.reject(new Error("Call to trySetDeviceOutput has argument(s) missing"))}if(!(typeof e.setSinkId==="function")){return Promise.reject(new Error("Your browser does not support required Audio Output Devices API"))}return e.setSinkId(t.browserAudioOutputId).then((()=>{var r=e.sinkId===t.browserAudioOutputId;return r}))}e.trySetDeviceOutput=trySetDeviceOutput;function isDeviceSelectedForInput(e,t){if(!e||!t){throw Error("Call to isDeviceSelectedForInput has argument(s) missing")}var r=e.getAudioTracks();for(var i=0,n=r.length;i<n;i++){var o=r[i];var a=o.getCapabilities();if(a.deviceId!==t.browserAudioInputId){return false}}return true}e.isDeviceSelectedForInput=isDeviceSelectedForInput;function getUserDeviceMediaExt(e){if(!navigator.mediaDevices||!navigator.mediaDevices.getUserMedia){return Promise.reject(new Error("Your browser does not support required media api"))}if(!I.initialized){return Promise.reject(new Error("Browser integration not initialized"))}if(location.protocol!=="https:"){g.warn("This function needs to run under https for best UX experience (persisted permissions)")}if(e!==undefined&&e!==null&&typeof e!=="object"){return Promise.reject(new Error("Optional constraints parameter must be an object"))}function mergeConstraints(e,t){if(t!==null&&t!==undefined&&typeof e==="object"){let i={};for(var r in t){i[r]=t[r]}for(var r in e){i[r]=mergeConstraints(e[r],t[r])}return i}else{return e}}return navigator.mediaDevices.getUserMedia(mergeConstraints({audio:true},e)).then((t=>_doGetActiveSDKDevice_And_BrowserDevice().then((r=>{t.getTracks().forEach((e=>{e.stop()}));if(r&&r.browserAudioInputId){return navigator.mediaDevices.getUserMedia(mergeConstraints({audio:{deviceId:r.browserAudioInputId}},e)).then((e=>({stream:e,deviceInfo:r})))}else{return Promise.reject(new Error("Could not find a Jabra device with a microphone"))}}))))}e.getUserDeviceMediaExt=getUserDeviceMediaExt;function fillInMatchingMediaInfo(e,t){function findBestMatchIndex(e,t){function editDistance(e,t){e=e.toLowerCase();t=t.toLowerCase();var r=new Array;for(var i=0;i<=e.length;i++){var n=i;for(var o=0;o<=t.length;o++){if(i==0)r[o]=o;else{if(o>0){var a=r[o-1];if(e.charAt(i-1)!=t.charAt(o-1))a=Math.min(Math.min(a,n),r[o])+1;r[o-1]=n;n=a}}}if(i>0)r[t.length]=n}return r[t.length]}function levenshteinDistance(e,t){let r=e;let i=t;if(e.length<t.length){r=t;i=e}let n=r.length;if(n===0){return 1}return(n-editDistance(r,i))/n}if(t.length==1){return 0}else if(t.length>0){let r=t.map((t=>{if(t.includes("("+e+")")){return 1}else{let r=t.indexOf(" - ");let i=r>=0?t.substring(r+3):t;return levenshteinDistance(e,i)}}));let i=r.reduce(((e,t,r,i)=>t>i[e]?r:e),0);return i}else{return-1}}function findMatchingMediaDevice(e,t,r){return r.find((r=>r.groupId==e&&r.kind==t))}if(e&&e.deviceName){let r=undefined;let i=undefined;let n=undefined;let o=undefined;let a=t.filter((e=>e.label&&e.label.toLowerCase().includes("jabra")&&(e.kind==="audioinput"||e.kind==="audiooutput")));let s=findBestMatchIndex(e.deviceName,a.map((e=>e.label)));if(s>=0){let e=a[s];r=e.groupId;o=e.label;if(e.kind==="audioinput"){i=e.deviceId;let t=findMatchingMediaDevice(r,"audiooutput",a);if(t){n=t.deviceId}}else if(e.kind==="audiooutput"){n=e.deviceId;let t=findMatchingMediaDevice(r,"audioinput",a);if(t){i=t.deviceId}}}if(r){e.browserGroupId=r}if(o){e.browserLabel=o}if(i){e.browserAudioInputId=i}if(n){e.browserAudioOutputId=n}}else{}}function _doGetSDKDevices_And_BrowserDevice(){if(!navigator.mediaDevices||!navigator.mediaDevices.enumerateDevices){return Promise.reject(new Error("Your browser does not support required media api"))}if(!I.initialized){return Promise.reject(new Error("Browser integration not initialized"))}if(location.protocol!=="https:"){return Promise.reject(new Error("Your browser needs https for lookup to work"))}return Promise.all([_doGetSDKDevices(),navigator.mediaDevices.enumerateDevices()]).then((([e,t])=>{e.forEach((e=>{fillInMatchingMediaInfo(e,t)}));return e}))}function _doGetActiveSDKDevice_And_BrowserDevice(){if(!navigator.mediaDevices||!navigator.mediaDevices.enumerateDevices){return Promise.reject(new Error("Your browser does not support required media api"))}if(!I.initialized){return Promise.reject(new Error("Browser integration not initialized"))}if(location.protocol!=="https:"){return Promise.reject(new Error("Your browser needs https for lookup to work"))}return Promise.all([_doGetActiveSDKDevice(),navigator.mediaDevices.enumerateDevices()]).then((([e,t])=>{fillInMatchingMediaInfo(e,t);return e}))}function booleanOrString(e){if(e!==""&&(typeof e==="string"||e instanceof String)){return e==="true"||e==="1"}else if(typeof e==="boolean"){return e}else{throw new Error("Illegal/missing argument - boolean or string expected")}}function numberOrString(e){if(e!==""&&(typeof e==="string"||e instanceof String)){return parseInt(e)}else if(typeof e=="number"){return e}else{throw new Error("Illegal/missing argument - number or string expected")}}function colorOrString(e){if(e!==""&&(typeof e==="string"||e instanceof String)){let t=parseInt(e,16);return[t>>16&255,t>>8&255,t&255]}else if(typeof e=="number"){let t=e;return[t>>16&255,t>>8&255,t&255]}else if(Array.isArray(e)){if(e.length!=3){throw new Error("Illegal argument - wrong dimension of number array (3 expected)")}return e}else{throw new Error("Illegal/missing argument - number array or hex string expected")}}})(jabra||(jabra={}));
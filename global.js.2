/*! [8/31/2016] */
if ( window.location.host === 'www.att.com' ) {
   var $thisDomain = '//0.ecom.attccc.com/styles/att/rwd/1.0.0';
}
else if( window.location.href.indexOf('/test') > -1 ){
   var $thisDomain = '../styles/att/rwd/1.0.0';
}
else {
   var $thisDomain = 'styles/att/rwd/1.0.0';
}

var DS2 = DS2 || {}
               /* 9:tab    13:enter  17:ctrl   18:alt    27:esc    32:space  35:end    36:home   37:left   38:up     39:right  40:down */
var keymap     = {9:false, 13:false, 17:false, 18:false, 27:false, 32:false, 35:false, 36:false, 37:false, 38:false, 39:false, 40:false},
    isMobile   = /Android|webOS|iPhone|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),
    notMobile  = !/Android|webOS|iPhone|iPod|BlackBerry|IEMobile|Opera Mini/i.test(navigator.userAgent),
    isIE       = /msie|trident/i.test(navigator.userAgent),
    isTouch    = 'ontouchstart' in document.documentElement,
    isSelected = "";



$(window).on('beforeunload', function(){
   $.noop(); // onbeforeunload enables back caching in IE
});

/* ONLOAD */
$(window).on("load", function () {
   "use strict";

   $.getScript = function (url, callback, cache) {
      $.ajax({
         type: "GET",
         url: url,
         success: callback,
         dataType: "script",
         cache: cache
      });
   };

   if ($('table .data-row').length != '0')                           { DS2.complexTables(); }
   if ($('.autoSize, .autoSize-children, .promo-tabs').length != '0'){ DS2.setautoSize(); }
   if ($('.autoWidth').length != '0')                                { DS2.autoWidth(); }
   if ($('[data-show-at], [data-show-between]').length != '0')       { DS2.mediaQueryShow(); }
   if ($('.reset-field').length != '0')                              { DS2.clearField(); }
   if ($('.btn-switch').length != '0')                               { DS2.sliderSwitch(); }
   if ($('[role="radiogroup"]').length != '0')                       { DS2.radioFIX(); }
   if ($('textarea').length != '0')                                  { DS2.textareaFIX(); }
   if ($('.checkbox-selectall').length != '0')                       { DS2.checkboxSelectall(); }
   if ($('[data-max-select]').length != '0')                         { DS2.maxselectbtn(); }
   if ($('.blur-overlay').length != '0')                             { DS2.blurOverlay(); }
   if ($('.progress').length != '0')                                 { DS2.progressBar(); }
   if ($('select').length != '0')                                    { DS2.wrapSelect(); }
   if ($('.starRating').length != '0')                               { DS2.starRating(); }
   if ($('.bellyband-link').length != '0')                           { DS2.bellyband(); }
   if ($('.modal').length != '0')                                    { DS2.modalDockedButtons(); }
   if ($('.btn-quantity-toggle').length != '0')                      { DS2.qtyToggle(); }
   if ($('.tiny-accordion, .tiny-tabs, .tiny-accordion-to-tabs').length != '0') { DS2.tabaccordion(); }
   if ($('.starrating-wrap[data-rating-avg]').length != '0')         { DS2.starRatings(); }

   if ($('[class*="tooltip"]').length != '0')                        { $.getScript($thisDomain + "/js/ds2-tooltip.js?timestamp=1475514226113", DS2.loadTooltipCSS, true); }
   if ($('[data-provide="datepicker"]').length != '0')               { $.getScript($thisDomain + "/js/bootstrap-datepicker.js?timestamp=1475514226113", DS2.loadCalendarCSS, true); }
   if ($('#cccardnumber').length != '0')                             { $.getScript($thisDomain + "/js/jquery.creditCardValidator.min.js?timestamp=1475514226113", DS2.loadCC_CSS, true); }
   if ($('.filmstrip').length != '0')                                { $.getScript($thisDomain + "/js/filmstrip.min.js?timestamp=1475514226113", DS2.filmstrip, true); }
   if ($('[data-validate]').length != '0')                           { $.getScript($thisDomain + "/js/rwd-form-validation.js?timestamp=1475514226113", $.noop, true); }
   if ($('.pagination').length != '0')                               { $.getScript($thisDomain + "/js/pagination.js?timestamp=1475514226113", DS2.paginationCSS,$.fn.pagination,true );}
   if ($('#marquee').length != '0')                                  { $.getScript($thisDomain + "/js/marquee.js?timestamp=1475514226113", DS2.marquee, true); }

   // lazy load additional fonts
   if ($('[class*="icon-social-"]').length != '0')                   { $('head').append('<link rel="stylesheet" type="text/css" href="' + $thisDomain + '/css/icon-social.css?timestamp=1475514226113">'); }
   if ($('[class*="icon-arrows-"]').length != '0')                   { $('head').append('<link rel="stylesheet" type="text/css" href="' + $thisDomain + '/css/icon-arrows.css?timestamp=1475514226113">'); }
   if ($('[class*="icon-building-"]').length != '0')                 { $('head').append('<link rel="stylesheet" type="text/css" href="' + $thisDomain + '/css/icon-buildings.css?timestamp=1475514226113">'); }
   if ($('[class*="icon-content-"]').length != '0')                  { $('head').append('<link rel="stylesheet" type="text/css" href="' + $thisDomain + '/css/icon-content.css?timestamp=1475514226113">'); }
   if ($('[class*="icon-controls-"]').length != '0')                 { $('head').append('<link rel="stylesheet" type="text/css" href="' + $thisDomain + '/css/icon-controls.css?timestamp=1475514226113">'); }
   if ($('[class*="icon-datanetwork-"]').length != '0')              { $('head').append('<link rel="stylesheet" type="text/css" href="' + $thisDomain + '/css/icon-datanetwork.css?timestamp=1475514226113">'); }
   if ($('[class*="icon-devices-"]').length != '0')                  { $('head').append('<link rel="stylesheet" type="text/css" href="' + $thisDomain + '/css/icon-devices.css?timestamp=1475514226113">'); }
   if ($('[class*="icon-documents-"]').length != '0')                { $('head').append('<link rel="stylesheet" type="text/css" href="' + $thisDomain + '/css/icon-documents.css?timestamp=1475514226113">'); }
   if ($('[class*="icon-healthcare-"]').length != '0')               { $('head').append('<link rel="stylesheet" type="text/css" href="' + $thisDomain + '/css/icon-healthcare.css?timestamp=1475514226113">'); }
   if ($('[class*="icon-location-"]').length != '0')                 { $('head').append('<link rel="stylesheet" type="text/css" href="' + $thisDomain + '/css/icon-location.css?timestamp=1475514226113">'); }
   if ($('[class*="icon-misc-"]').length != '0')                     { $('head').append('<link rel="stylesheet" type="text/css" href="' + $thisDomain + '/css/icon-misc.css?timestamp=1475514226113">'); }
   if ($('[class*="icon-numslets-"]').length != '0')                 { $('head').append('<link rel="stylesheet" type="text/css" href="' + $thisDomain + '/css/icon-numslets.css?timestamp=1475514226113">'); }
   if ($('[class*="icon-people-"]').length != '0')                   { $('head').append('<link rel="stylesheet" type="text/css" href="' + $thisDomain + '/css/icon-people.css?timestamp=1475514226113">'); }
   if ($('[class*="icon-retail-"]').length != '0')                   { $('head').append('<link rel="stylesheet" type="text/css" href="' + $thisDomain + '/css/icon-retail.css?timestamp=1475514226113">'); }
   if ($('[class*="icon-securityalerts-"]').length != '0')           { $('head').append('<link rel="stylesheet" type="text/css" href="' + $thisDomain + '/css/icon-securityalerts.css?timestamp=1475514226113">'); }
   if ($('[class*="icon-bubble-"]').length != '0')                   { $('head').append('<link rel="stylesheet" type="text/css" href="' + $thisDomain + '/css/icon-speechbubbles.css?timestamp=1475514226113">'); }
   if ($('[class*="icon-trans-"]').length != '0')                    { $('head').append('<link rel="stylesheet" type="text/css" href="' + $thisDomain + '/css/icon-transportation.css?timestamp=1475514226113">'); }
   if ($('[class*="icon-weather-"]').length != '0')                  { $('head').append('<link rel="stylesheet" type="text/css" href="' + $thisDomain + '/css/icon-weather.css?timestamp=1475514226113">'); }

   DS2.miscellaneous();
   
   $(function () {
      var count = 1,
         event = function(event){

            if (event.animationName == 'DOMinsertion') {

               DS2.complexTables();
               DS2.setautoSize();
               DS2.autoWidth();
               DS2.mediaQueryShow();
               DS2.clearField();
               DS2.sliderSwitch();
               DS2.radioFIX();
               DS2.textareaFIX();
               DS2.checkboxSelectall();
               DS2.maxselectbtn();
               DS2.blurOverlay();
               DS2.progressBar();
               DS2.wrapSelect();
               DS2.starRating();
               DS2.bellyband();
               DS2.modalDockedButtons();
               DS2.qtyToggle();
               DS2.tabaccordion(); 
               DS2.starRatings();
               
               if ($('[class*="tooltip"]').length != '0')                        { $.getScript($thisDomain + "/js/ds2-tooltip.js?timestamp=1475514226113", DS2.loadTooltipCSS, true); }
               if ($('[data-provide="datepicker"]').length != '0')               { $.getScript($thisDomain + "/js/bootstrap-datepicker.js?timestamp=1475514226113", DS2.loadCalendarCSS, true); }
               if ($('#cccardnumber').length != '0')                             { $.getScript($thisDomain + "/js/jquery.creditCardValidator.min.js?timestamp=1475514226113", DS2.loadCC_CSS, true); }
               if ($('.filmstrip').length != '0')                                { $.getScript($thisDomain + "/js/quickstart.filmstrip.min.js?timestamp=1475514226113", DS2.filmstrip, true); }
               if ($('[data-validate]').length != '0')                           { $.getScript($thisDomain + "/js/rwd-form-validation.js?timestamp=1475514226113", $.noop, true); }
               if ($('.pagination').length != '0')                               { $.getScript($thisDomain + "/js/pagination.js?timestamp=1475514226113", DS2.paginationCSS,$.fn.pagination,true );}
               if ($('#marquee').length != '0')                                  { $.getScript($thisDomain + "/js/marquee.min.js?timestamp=1475514226113", DS2.marquee, true); }

               // lazy load additional fonts
               if ($('[class*="icon-social-"]').length != '0')                   { if($('#iconSocialCSS').length == '0'){ $('head').append('<link id="iconSocialCSS" rel="stylesheet" type="text/css" href="' + $thisDomain + '/css/icon-social.css?timestamp=1475514226113">'); } }
               if ($('[class*="icon-arrows-"]').length != '0')                   { if($('#iconArrowCSS').length == '0'){ $('head').append('<link id="iconArrowCSS" rel="stylesheet" type="text/css" href="' + $thisDomain + '/css/icon-arrows.css?timestamp=1475514226113">'); } }
               if ($('[class*="icon-building-"]').length != '0')                 { if($('#iconBuildingCSS').length == '0'){ $('head').append('<link id="iconBuildingCSS" rel="stylesheet" type="text/css" href="' + $thisDomain + '/css/icon-buildings.css?timestamp=1475514226113">'); } }
               if ($('[class*="icon-content-"]').length != '0')                  { if($('#iconContentCSS').length == '0'){ $('head').append('<link id="iconContentCSS" rel="stylesheet" type="text/css" href="' + $thisDomain + '/css/icon-content.css?timestamp=1475514226113">'); } }
               if ($('[class*="icon-controls-"]').length != '0')                 { if($('#iconControlsCSS').length == '0'){ $('head').append('<link id="iconControlsCSS" rel="stylesheet" type="text/css" href="' + $thisDomain + '/css/icon-controls.css?timestamp=1475514226113">'); } }
               if ($('[class*="icon-datanetwork-"]').length != '0')              { if($('#iconDatanetworkCSS').length == '0'){ $('head').append('<link id="iconDatanetworkCSS" rel="stylesheet" type="text/css" href="' + $thisDomain + '/css/icon-datanetwork.css?timestamp=1475514226113">'); } }
               if ($('[class*="icon-devices-"]').length != '0')                  { if($('#iconDevicesCSS').length == '0'){ $('head').append('<link id="iconDevicesCSS" rel="stylesheet" type="text/css" href="' + $thisDomain + '/css/icon-devices.css?timestamp=1475514226113">'); } }
               if ($('[class*="icon-documents-"]').length != '0')                { if($('#iconDocumentsCSS').length == '0'){ $('head').append('<link id="iconDocumentsCSS" rel="stylesheet" type="text/css" href="' + $thisDomain + '/css/icon-documents.css?timestamp=1475514226113">'); } }
               if ($('[class*="icon-healthcare-"]').length != '0')               { if($('#iconHealthcareCSS').length == '0'){ $('head').append('<link id="iconHealthcareCSS" rel="stylesheet" type="text/css" href="' + $thisDomain + '/css/icon-healthcare.css?timestamp=1475514226113">'); } }
               if ($('[class*="icon-location-"]').length != '0')                 { if($('#iconLocationCSS').length == '0'){ $('head').append('<link id="iconLocationCSS" rel="stylesheet" type="text/css" href="' + $thisDomain + '/css/icon-location.css?timestamp=1475514226113">'); } }
               if ($('[class*="icon-misc-"]').length != '0')                     { if($('#iconMiscCSS').length == '0'){ $('head').append('<link id="iconMiscCSS" rel="stylesheet" type="text/css" href="' + $thisDomain + '/css/icon-misc.css?timestamp=1475514226113">'); } }
               if ($('[class*="icon-numslets-"]').length != '0')                 { if($('#iconNumsletsCSS').length == '0'){ $('head').append('<link id="iconNumsletsCSS" rel="stylesheet" type="text/css" href="' + $thisDomain + '/css/icon-numslets.css?timestamp=1475514226113">'); } }
               if ($('[class*="icon-people-"]').length != '0')                   { if($('#iconPeopleCSS').length == '0'){ $('head').append('<link id="iconPeopleCSS" rel="stylesheet" type="text/css" href="' + $thisDomain + '/css/icon-people.css?timestamp=1475514226113">'); } }
               if ($('[class*="icon-retail-"]').length != '0')                   { if($('#iconRetailCSS').length == '0'){ $('head').append('<link id="iconRetailCSS" rel="stylesheet" type="text/css" href="' + $thisDomain + '/css/icon-retail.css?timestamp=1475514226113">'); } }
               if ($('[class*="icon-securityalerts-"]').length != '0')           { if($('#iconSecurityalertsCSS').length == '0'){ $('head').append('<link id="iconSecurityalertsCSS" rel="stylesheet" type="text/css" href="' + $thisDomain + '/css/icon-securityalerts.css?timestamp=1475514226113">'); } }
               if ($('[class*="icon-bubble-"]').length != '0')                   { if($('#iconBubbleCSS').length == '0'){ $('head').append('<link id="iconBubbleCSS" rel="stylesheet" type="text/css" href="' + $thisDomain + '/css/icon-speechbubbles.css?timestamp=1475514226113">'); } }
               if ($('[class*="icon-trans-"]').length != '0')                    { if($('#iconTransCSS').length == '0'){ $('head').append('<link id="iconTransCSS" rel="stylesheet" type="text/css" href="' + $thisDomain + '/css/icon-transportation.css?timestamp=1475514226113">'); } }
               if ($('[class*="icon-weather-"]').length != '0')                  { if($('#iconWeatherCSS').length == '0'){ $('head').append('<link id="iconWeatherCSS" rel="stylesheet" type="text/css" href="' + $thisDomain + '/css/icon-weather.css?timestamp=1475514226113">'); } }
               
               DS2.miscellaneous();
               
            }
        }

      document.addEventListener('animationstart', event, false);
      document.addEventListener('MSAnimationStart', event, false);
      document.addEventListener('webkitAnimationStart', event, false);
   });
});

$(window).on("resize", function () {
   "use strict";
   DS2.setBlur();
   if ($('.autoSize').length !== 0) {
      $('.autoSize-this').removeAttr('style');

      var tmp = $('.autoSize').attr('data-autosize-what').split("|");
      $(tmp[0]).removeAttr('style');
      $(tmp[1]).removeAttr('style');
      $(tmp[2]).removeAttr('style');

      DS2.setautoSize();
      DS2.bellyband();
   }
   if ($('.modal').length != '0')                                          { DS2.modalDockedButtons(); }
   if ($('[data-show-at], [data-show-between]').length != '0')             { DS2.mediaQueryShow(); }
   
   // COMPLEX TABLES
   $('.data-row-list li').addClass('hide');
   $('.data-row').each(function(){
      if($(this).next('.data-row-list').is(':hidden')){
         $(this).removeClass('opened');
         $(this).find('.icon-accordion-minus').removeClass('icon-accordion-minus');
         $(this).find('span[id="sup-"]').text('Show row below.');
         $(this).next('.data-row-list').addClass('hide');
      }
   });
   
   DS2.datatable();
});


// Load CSS that isn't used very often
DS2.loadTooltipCSS = function(){
   if($('#ds2-tooltip').length == '0'){
      $('head').append('<link id="ds2-tooltip" rel="stylesheet" type="text/css" href="' + $thisDomain + '/css/ds2-tooltip.min.css?timestamp=1475514226113">');
   }
};

DS2.loadCalendarCSS = function () {
   if($('#ds2-datepicker').length == '0'){
      $('head').append('<link id="ds2-datepicker" rel="stylesheet" type="text/css" href="' + $thisDomain + '/css/ds2-bootstrap-datepicker.min.css?timestamp=1475514226113">');
   }
};

DS2.loadStepIndicatorCSS = function () {
   if($('#ds2-step-indicator').length == '0'){
      $('head').append('<link id="ds2-step-indicator" rel="stylesheet" type="text/css" href="' + $thisDomain + '/css/ds2-step-indicator.min.css?timestamp=1475514226113">');
   }
};

DS2.loadC2Ccss = function () {
   if($('#ds2-c2c').length == '0'){
      $('head').append('<link id="ds2-c2c" rel="stylesheet" type="text/css" href="' + $thisDomain + '/css/ds2-c2c.min.css?timestamp=1475514226113">');
   }
};

DS2.loadCC_CSS = function () {
   if($('#ds2-ccinput').length == '0'){
      $('head').append('<link id="ds2-ccinput" rel="stylesheet" type="text/css" href="' + $thisDomain + '/css/ds2-cc-input-field.min.css?timestamp=14755142261137">');
   }
};

DS2.filmstrip = function () {
   if($('#ds2-filmstrip').length == '0'){
      $('head').append('<link id="ds2-filmstrip" rel="stylesheet" type="text/css" href="' + $thisDomain + '/css/ds2-filmstrip.min.css?timestamp=1475514226113">');
   }
};

DS2.paginationCSS = function () {
   if($('#ds2-pagination').length == '0'){
      $('head').append('<link id="ds2-pagination" rel="stylesheet" type="text/css" href="' + $thisDomain + '/css/ds2-pagination.css?timestamp=1475514226113">');
   }
};

DS2.marquee = function () {
    if($('#ds2-marquee').length == '0'){
        $('head').append('<link id="ds2-marquee" rel="stylesheet" type="text/css" href="' + $thisDomain + '/css/ds2-marquee.min.css?timestamp=1475514226113">');
    }
}

// COMPLEX TABLES
DS2.complexTables = (function(){
   $('.data-row th.col-1').each(function(){
      var colText = $(this).text();
      $(this).contents().filter(function(){
         return this.nodeType === 3
      }).wrap('<span id="span-'+ $(this).attr('id') +'" class="hide"></span>');
      $(this).append('<button type="button" aria-expanded="false" aria-describedby="sup-'+ $(this).attr('id') +'"><i class="icon-accordion-plus" aria-hidden="true"></i>'+ colText +'</button><span id="sup-'+ $(this).attr('id') +'" style="display:none">Show row below.</span>');
   });
   
   $('.data-row-list').addClass('hide');
   $('.data-row-list li').addClass('hide');
   DS2.datatable();
   DS2.datatableExpand(); 
});

DS2.datatable = function(){         
   var h1 = $('#heading1').text(),
       h2 = $('#heading2').text(),
       h3 = $('#heading3').text(),
       h4 = $('#heading4').text(),
       h5 = $('#heading5').text(),
       h6 = $('#heading6').text(),
       h7 = $('#heading7').text(),
       h8 = $('#heading8').text(),
       h9 = $('#heading9').text();

   $('#row-heading').find('.align-col-right').each(function(){
      var colNum = $(this).index() + 1;
      $('.data-row td.col-' + colNum).addClass('text-right');
   });
   $('table').each(function(){
      if( $(this).find('.data-row').length >= '6' ){
         $(this).addClass('striped');
         $('.data-row:odd').addClass('odd');
      }
   });
   
   $('.data-row').each(function(){
      var $this = $(this),
          data1 = $(this).find('.col-1').html(),
          data2 = $(this).find('.col-2').html(),
          data3 = $(this).find('.col-3').html(),
          data4 = $(this).find('.col-4').html(),
          data5 = $(this).find('.col-5').html(),
          data6 = $(this).find('.col-6').html(),
          data7 = $(this).find('.col-7').html(),
          data8 = $(this).find('.col-8').html(),
          data9 = $(this).find('.col-9').html(),
         anycol = $(this).find('td:hidden'),
      rowNumber = $this.index('.data-row') + 1;
         
      if($('#heading3').is(':hidden')){
         $this.next('.data-row-list').find('.li-3').removeClass('hide').html('<div>'+ h3 +': </div><div>'+ data3 +'</div>');
      }
      if($('#heading4').is(':hidden')){
         $this.next('.data-row-list').find('.li-4').removeClass('hide').html('<div>'+ h4 +': </div><div>'+ data4 +'</div>');
      }
      if($('#heading5').is(':hidden')){
         $this.next('.data-row-list').find('.li-5').removeClass('hide').html('<div>'+ h5 +': </div><div>'+ data5 +'</div>');
      }
      if($('#heading6').is(':hidden')){
         $this.next('.data-row-list').find('.li-6').removeClass('hide').html('<div>'+ h6 +': </div><div>'+ data6 +'</div>');
      }
      if($('#heading7').is(':hidden')){
         $this.next('.data-row-list').find('.li-7').removeClass('hide').html('<div>'+ h7 +': </div><div>'+ data7 +'</div>');
      }
      if($('#heading8').is(':hidden')){
         $this.next('.data-row-list').find('.li-8').removeClass('hide').html('<div>'+ h8 +': </div><div>'+ data8 +'</div>');
      }
      if($('#heading9').is(':hidden')){
         $this.next('.data-row-list').find('.li-9').removeClass('hide').html('<div>'+ h9 +': </div><div>'+ data9 +'</div>');
      }
      if(anycol.length != '0'){
         $(this).addClass('has-button');
         $(this).find('span[id*="span-"]').addClass('hide');
         $(this).find('.col-1 button').removeClass('hide');
         $(this).closest('table').addClass('complex-table');
      }
      else{
         $(this).removeClass('has-button');
         $(this).find('span[id*="span-"]').removeClass('hide');
         $(this).find('.col-1 button').addClass('hide');
         $(this).closest('table').removeClass('complex-table');
      }
                  
   });
   
}
DS2.datatableExpand = function(){
   $('table .col-1 button').on('click', function(){
      if(!$(this).hasClass('hide') && $(this).closest('.data-row').next('.data-row-list').hasClass('hide')){
         $(this).attr({'aria-expanded':'true'});
         $(this).closest('.data-row').addClass('opened');
         $(this).closest('.data-row').next('.data-row-list').removeClass('hide'); 
         $(this).next().text('Hide row below.');
      }
      else{
         $(this).attr({'aria-expanded':'false'});
         $(this).closest('.data-row').removeClass('opened');
         $(this).closest('.data-row').next('.data-row-list').addClass('hide');
         $(this).next().text('Show row below.');
      }
      $(this).find('i').toggleClass('icon-accordion-minus');//.attr({'aria-expanded':'true'})
   });
}
// end complex tables

DS2.mediaQueryShow = (function(){
   $('[data-show-at]').each(function(){

      if($(this).not('[data-dom="ready"]')){
         $(this).attr('data-dom','ready');

         var $this      = $(this),
            showAtWidth = $(this).attr('data-show-at');

         if($(window).innerWidth() >= showAtWidth){
            $this.css({
               'display':'',
               'visibility':'visible'
            });
         }
         else{
            $this.css({
               'display':'none',
               'visibility':'hidden'
            });
         }
      }
   });

   $('[data-show-between]').each(function(){
      if($(this).not('[data-dom="ready"]')){
         $(this).attr('data-dom','ready');

         var $this      = $(this),
            showBetween = $(this).attr('data-show-between'),
            betweenThese = showBetween.split("|"),
            betweenThis = betweenThese[0],
            betweenThat = betweenThese[1];

         if(betweenThis == ''){betweenThis = '0'}
         if(betweenThat == ''){betweenThat = $(window).innerWidth()}

         if($(window).innerWidth() >= betweenThis && $(window).innerWidth() <= betweenThat){
            $this.css({
               'display':'inherit',
               'visibility':'visible'
            });
         }
         else{
            $this.css({
               'display':'none',
               'visibility':'hidden'
            });
         }
      }
   });
});

// MAKE ALL CONTAINERS SAME HEIGHT
DS2.setautoSize = function () {
   $('.autoSize').each(function () {
      if($(this).not('[data-dom="ready"]')){
         $(this).attr('data-dom','ready');

         var autoSize = $(this).find('.autoSize-this').tallestSize() + "px";
         $(this).find('.autoSize-this').each(function () {
            if (window.innerWidth >= '768') {
               $(this).css({
                  'height': autoSize
               });
            }
            else if (window.innerWidth <= '768' && $(this).parents('.row-nowrap')) {
               $(this).parents('.row-nowrap').find('.autoSize-this').css({
                  'height': autoSize
               });
            }
            else {
               $(this).css({
                  'height': 'auto'
               });
            }
         });

         var sizeWhat = $(this).attr('data-autosize-what'),
                  tmp = sizeWhat.split("|"),
            autoSize1 = $(this).find(tmp[0]).tallestSize() + "px"
            autoSize2 = $(this).find(tmp[1]).tallestSize() + "px";
            autoSize3 = $(this).find(tmp[2]).tallestSize() + "px";

         $(this).find(tmp[0]).css({
               'height': autoSize1
            });
         $(this).find(tmp[1]).css({
               'height': autoSize2
            });
         $(this).find(tmp[2]).css({
               'height': autoSize3
            });

      }
   });
   $('.autoSize-children').each(function(){
      if($(this).not('[data-dom="ready"]')){
         $(this).attr('data-dom','ready');

         var autoHeight = $(this).children().tallestSize() + "px",
              autoWidth = $(this).children().widestSize() + "px";

         $(this).children().each(function () {
            $(this).css({
               'height': autoHeight,
               'width': autoWidth
            });
         });
      }
   });
};

// MAKE ALL CONTAINERS SAME WIDTH
DS2.autoWidth = function () {
   $('.autoWidth').each(function () {
      if($(this).not('[data-dom="ready"]')){
         $(this).attr('data-dom','ready');

         var autoWidth = $(this).find('.autoWidth-this').widestSize() + "px";
         $(this).find('.autoWidth-this').each(function () {
            $(this).css({
               'width': autoWidth
            });
         });
      }
   });
};

// CLEAR FORM FIELD
DS2.clearField = function () {
   $('.reset-field').each(function(){
      if($(this).not('[data-dom="ready"]')){
         $(this).attr('data-dom','ready');

         $(this).attr({
            'tabindex': '-1',
            'aria-hidden': 'true'
         }).on('click', function () {
            $(this).removeAttr('style');
            $(this).siblings('input, textarea').prop('value','').focus();
         });
      }
   });
};

// ON/OFF SLIDE SWITCH
DS2.sliderSwitch = function () {
   $('.btn-switch > input').each(function () {
      var $this = $(this);

      if($(this).not('[data-dom="ready"]')){
         $(this).attr('data-dom','ready');

         $(this).closest('label').on('keydown', function (e) {
            if (e.keyCode in keymap) {
               keymap[e.keyCode] = true;
               if(keymap[13]) {
                  $this.click();
                  e.stopPropagation();
               }
            }
         });
         
         var   x = $(this).closest('.btn-switch-label').find('> span').text(),
               y = $(this).closest('.btn-switch-label').find('.switch-overlay > .btn-slider-on').text(),
               z = $(this).closest('.btn-switch-label').find('.switch-overlay > .btn-slider-off').text(),
            msg1 = 'Double tap to turn',
            msg2 = 'Click to turn',
               d = 'Disabled',
          srText = $(this).closest('.btn-switch-label').find('.sr-text').text();
         
         if(isMobile){
            if($(this).is(':checked') == true){
               if($(this).is(':disabled') == false){
                  $(this).closest('.btn-switch-label').attr({'aria-label': x + ' ' + y + '. ' + msg1 + ' ' + z + '. ' + srText});
               }
               else{
                  $(this).closest('.btn-switch-label').attr({'aria-label': x + ' ' + y + '. ' + d + '. ' + srText});
               }
            }
            else{
               if($(this).is(':disabled') == false){
                  $(this).closest('.btn-switch-label').attr({'aria-label': x + ' ' + z + '. ' + msg1 + ' ' + y + '. ' + srText});
               }
               else{
                  $(this).closest('.btn-switch-label').attr({'aria-label': x + ' ' + z + '. ' + d + '. ' + srText});
               }
            }
         }
         else{
            if($(this).is(':checked') == true){
               if($(this).is(':disabled') == false){
                  $(this).closest('.btn-switch-label').attr({'aria-label': x + ' ' + y + '. ' + msg2 + ' ' + z + '. ' + srText});
               }
               else{
                  $(this).closest('.btn-switch-label').attr({'aria-label': x + ' ' + y + '. ' + d + '. ' + srText});
               }
            }
            else{
               if($(this).is(':disabled') == false){
                  $(this).closest('.btn-switch-label').attr({'aria-label': x + ' ' + z + '. ' + msg2 + ' ' + y + '. ' + srText});
               }
               else{
                  $(this).closest('.btn-switch-label').attr({'aria-label': x + ' ' + z + '. ' + d + '. ' + srText});
               }
            }
         }
      }
   });

   $(document).on('click touchstart', '.btn-switch > input', function (e) {
      if(e.type == 'touchstart') {
         return;
      }
      e.handled = true;

      var x = $(this).closest('.btn-switch-label').find('> span').text(),
          y = $(this).closest('.btn-switch-label').find('.switch-overlay > .btn-slider-on').text(),
          z = $(this).closest('.btn-switch-label').find('.switch-overlay > .btn-slider-off').text(),
       msg1 = 'Double tap to turn',
       msg2 = 'Click to turn',
          d = 'Disabled',
     srText = $(this).closest('.btn-switch-label').find('.sr-text').text();
      
      if(isMobile){
         if($(this).is(':checked') == true){
            if($(this).is(':disabled') == false){
               $(this).closest('.btn-switch-label').attr('aria-label', x + ' ' + y + '. ' + msg1 + ' ' + z + '. ' + srText);
            }
            else{
               $(this).closest('.btn-switch-label').attr('aria-label', x + ' ' + y + '. ' + d + '. ' + srText);
            }
         }
         else{
            if($(this).is(':disabled') == false){
               $(this).closest('.btn-switch-label').attr('aria-label', x + ' ' + z + '. ' + msg1 + ' ' + y + '. ' + srText);
            }
            else{
               $(this).closest('.btn-switch-label').attr('aria-label', x + ' ' + z + '. ' + d + '. ' + srText);
            }
         }
      }
      else{
         if($(this).is(':checked') == true){
            if($(this).is(':disabled') == false){
               $(this).closest('.btn-switch-label').attr('aria-label', x + ' ' + y + '. ' + msg2 + ' ' + z + '. ' + srText);
            }
            else{
               $(this).closest('.btn-switch-label').attr('aria-label', x + ' ' + y + '. ' + d + '. ' + srText);
            }
         }
         else{
            if($(this).is(':disabled') == false){
               $(this).closest('.btn-switch-label').attr('aria-label', x + ' ' + z + '. ' + msg2 + ' ' + y + '. ' + srText);
            }
            else{
               $(this).closest('.btn-switch-label').attr('aria-label', x + ' ' + z + '. ' + d + '. ' + srText);
            }
         }
      }

   });

};

/* =====================================================
   * RADIO ACCESSIBILITY FIX v1.1.0
   * http://www.att.com/sandbox
   * ===================================================
   * Copyright 2016 AT&T, Inc.
   *
   * Description: Radios are announced incorrectly when
   * the form elements are wrapped within other elements
   * like DIV's.

   * Since designs are complex there is no alternative
   * but to tell screen readers what is a radio, which
   * group of radios it belongs to, and which one within
   * the group is selected.
* ====================================================== */
DS2.radioFIX = (function() {
   $('[role="radiogroup"]').each(function(){

      $(this).find('[role="radio"]').each(function(index){
         if($(this).not('[data-dom="ready"]')){
            $(this).attr('data-dom','ready');

            if(this.tagName == "BUTTON"){
               var isChecked = $(this).hasClass('active') ? 'Checked' : 'Unchecked',
                  NofN     = (index + 1) + ' of ' + $(this).closest('[role="radiogroup"]').find('button[role="radio"]').length,
                  $buttons = $(this).closest('[role="radiogroup"]').find('button[role="radio"]');

               if(/Android/i.test(navigator.userAgent)) {
                  $(this).append('<span class="hidden-spoken">. '+ NofN+'.</span>');
               }

               if(notMobile){
                  if( $(this).hasClass('active') ){
                     $(this).attr('tabindex','0');
                  }
                  else if( $(this).attr('tabindex') == '0'){
                     $(this).attr('tabindex','0');
                  }
                  else{
                     $(this).attr('tabindex','-1');
                  }
                  $(this).on('focus', function(){
                     $(this).click();
                  });

                  $(this).on('keydown', function(e){
                     if (e.keyCode in keymap) {
                        keymap[e.keyCode] = true;

                        if(keymap[37] || keymap[38]) { // left||up = previous
                           if(index == "0"){
                              $buttons.attr('tabindex','-1');
                              $buttons.last().focus().click().attr('tabindex','0');
                           }
                           else{
                              $(this).attr('tabindex','-1').prev().focus().click().attr('tabindex','0');
                           }
                           e.preventDefault();
                        }
                        if(keymap[39] || keymap[40]) { // right||down = next
                           if(index == ($buttons.length) -1 ) {
                              $buttons.attr('tabindex','-1');
                              $buttons.first().focus().click().attr('tabindex','0');
                           }
                           else{
                              $(this).attr('tabindex','-1').next().focus().click().attr('tabindex','0');
                           }
                           e.preventDefault();
                        }
                     }
                  });
               }
            }
            if(this.tagName != "BUTTON"){
               var isChecked  = $(this).find('input[type="radio"]').is(':checked') ? 'true' : 'false',
                   isDisabled = $(this).find('input[type="radio"]').is(':disabled') ? 'true' : 'false',
                   numOfx     = (index + 1) + ' of ' + $(this).closest('[role="radiogroup"]').find('input[type="radio"]').length,
                   NofN       = (index + 1) + ' of ' + $(this).closest('[role="radiogroup"]').find('button[role="radio"]').length;

               $(this).attr({'aria-checked':isChecked, 'aria-disabled':isDisabled, 'data-opNum':numOfx});
               isChecked == 'true' ? $(this).parent('.radio-box').addClass('active') : $(this).parent('.radio-box').removeClass('active');

               if(/Android/i.test(navigator.userAgent)) {
                  $(this).append('<span class="hidden-spoken">. '+ numOfx+'.</span>');
               }
            }
         }
      });
   });

   // update radios on click
   $('[role="radiogroup"] input[type="radio"]').on('click', function(){
      var    $this  = $(this),
         isDisabled = $(this).find('input').is(':disabled') ? 'true' : 'false';

      $(this).closest('[role="radiogroup"]').find('input[type="radio"]').each(function(){
         var isDisabled2= $(this).is(':disabled') ? 'true' : 'false',
            numOfx2    = $(this).closest('[role="radio"]').attr('data-opNum');

         $(this).not($this).closest('[role="radio"]').attr({'aria-checked':'false', 'aria-disabled':isDisabled2}).parent('.radio-box').removeClass('active');
      });
      $this.closest('[role="radio"]').attr({'aria-checked':'true', 'aria-disabled':isDisabled}).focus().parent('.radio-box').addClass('active');
   });
   /* end radio fix */
});

// TEXTAREA ADJUSTMENT WHEN RESET
DS2.textareaFIX = (function(){
   $('textarea').each(function(){
      if($(this).not('[data-dom="ready"]')){
         $(this).attr('data-dom','ready');

         $(this).prop('scrollHeight') > $(this).innerHeight() ? $(this).addClass('hasScrollbar') : $(this).removeClass('hasScrollbar');
         $(this).on('keyup', function(){
            $(this).prop('scrollHeight') > $(this).innerHeight() ? $(this).addClass('hasScrollbar') : $(this).removeClass('hasScrollbar');
         });
      }
   });
});

// SELECT ALL CHECKBOXES
DS2.checkboxSelectall = (function(){
   $('.checkbox-selectall').each(function(){
      if($(this).not('[data-dom="ready"]')){
         $(this).attr('data-dom','ready');

         var $this            = $(this),
          boxGroup            = $this.attr('data-selectall-group'),
          checkboxesSelector  = $('#'+ boxGroup).find('input[type="checkbox"]');

         $this.on('click', function() {
            $(checkboxesSelector).each( function() {
               $(this)
                  .prop('checked', $this.prop('checked'))
                  .attr('checked', $this.prop('checked'))
                     .closest('[role="checkbox"]')
                     .attr('aria-checked', $this.prop('checked'));

               if($this.prop('checked') == true){
                  $this
                     .removeAttr('indeterminate')
                     .removeClass('indeterminate')
                     .prop('checked', $this.prop('checked'))
                        .closest('[role="checkbox"]')
                        .attr( "aria-checked",'true' );
               }
               else if($this.prop('checked') == false){
                  $this
                     .prop('checked', $this.prop('checked'))
                        .closest('[role="checkbox"]')
                        .attr('aria-checked','false');

                  $(checkboxesSelector).each( function() {
                     var box = $(this);

                     setState();

                     box.click( function() {
                        setState();
                     });
                  });
               }
            });
         });

         $(checkboxesSelector).each( function() {
            var box = $(this);

            setState();

            box.click( function() {
               setState();
            });
         });

         function setState(){
            var someChecked    = false,
                someNotChecked = false;

            var status = "none";

            $(checkboxesSelector).each( function() {
               if( $(this).prop("checked") === true ) {
                  $(this).attr('checked', true).closest('[role="checkbox"]').attr("aria-checked", "true");
                  someChecked = true;
               } else {
                  $(this).attr('checked', false).closest('[role="checkbox"]').attr("aria-checked", "false");
                  someNotChecked = true;
               }
            });

            if( someChecked && someNotChecked ) {
               $this.prop('checked', false)
                  .attr({'indeterminate': true, 'checked': false})
                  .addClass('indeterminate')
                  .closest('[role="checkbox"]')
                     .attr('aria-checked', 'mixed');
            }
            else if( someChecked && !someNotChecked ) {
               $this.prop('checked', true)
                  .attr({'checked': true})
                  .removeAttr("indeterminate")
                  .removeClass('indeterminate')
                  .closest('[role="checkbox"]')
                     .attr('aria-checked', 'true');
            }
            else if( !someChecked ) {
               $this.prop('checked', false)
                  .attr({'checked': false})
                  .removeAttr("indeterminate")
                  .removeClass('indeterminate')
                  .closest('[role="checkbox"]')
                     .attr('aria-checked', 'false');
            }
         }
         return $this;
      }
   });
});

// max selectable number of buttons in a button group
DS2.maxselectbtn = (function(){
   $('[data-max-select]').each(function () {
      if($(this).not('[data-dom="ready"]')){
         $(this).attr('data-dom','ready');

         var $this = $(this),
            $btnMax = $this.attr('data-max-select'),
            countchecked = 0;

         $this.find('.btn').on('state_change', function () {
            countlength = $this.find('.btn').length,
            countchecked = $this.find('.btn.active').length;

           	if (countchecked < $btnMax) {
               $this.find('button:disabled').removeAttr('disabled');
               //$this.find('button > .btnMaxDisabled').remove();
               $this.find('button').attr('aria-label', countchecked + ' of ' + $btnMax + ' options selected.');
					//$this.next('span').attr({'aria-hidden': 'true'}).text(countchecked + ' of ' + $btnMax + ' options selected.');
               $this.on('click', 'button.active', function (e) {
                  $this.removeClass('active');
                  $this.attr('data-toggle', 'button').find('button:disabled').removeAttr('disabled').find('button > .hidden-spoken').remove();
               });
            }
            else {
               $this.find('button').attr('aria-label', countchecked + ' of ' + $btnMax + ' options selected.');
					//$this.next('span').text(countchecked + ' of ' + $btnMax + ' options selected.');
               $this.find('button').not(".active").attr({
                  'onclick': 'return false;',
                  'disabled': 'disabled',
                  'aria-selected': 'false',
                  'aria-label':$btnMax + ' options already selected.'
               });
               $this.removeAttr('data-toggle');
            }
         });
      }
   });
});

// get current properties of element
DS2.getProperties = function(e,p,g){g=window.getComputedStyle;return(g?g(e):e.currentStyle)[p.replace(/-(\w)/gi,function(w,l){return l.toUpperCase()})]},
DS2.blurOverlay = (function(){
   if(isIE){
      $('.blur-overlay').each(function(){
			if($(this).not('[data-dom="ready"]')){
         $(this).attr('data-dom','ready');

            var thisElement = $(this);
            var getId = $(this).attr('data-blur-what'),
            marquee  = document.getElementById(getId);
            var blur_bgImg= (function() {
               var bg = DS2.getProperties(marquee, 'background-image');
               bg = bg.replace('url("','').replace('")','');
               return bg;
            });
            var bgImg = new Image();
            bgImg.src = blur_bgImg();
            var imgSize = (function(){
               bgImg.onload = (function() {
                  var imgWidth = this.width;
                  var imgHeight = this.height;
                  blurFunction(imgWidth, imgHeight);
               });
            });
            // add blurBg overlay
            var blurFunction = (function(imgWidth, imgHeight){
               thisElement.before('<svg class="blurBg" viewBox="0 0 '+ imgWidth +' '+ imgHeight +'" preserveAspectRatio="xMidYMin slice" id="'+ getId +'-blurIMG"><image width=100% height=100% style="filter:url(#blur-effect-1);" x="0" y="0" xlink:href="'+ blur_bgImg() +'" /><filter id="blur-effect-1"><feGaussianBlur stdDeviation="8" /></filter></svg>');
               DS2.setBlur();
               $(window).on('resize', function(){
                     var bgValues =  DS2.getProperties(marquee, 'background-position').split(" ");
                     var marqueeWidth =  parseFloat(DS2.getProperties(marquee, 'width'));
                     var xPosition = parseFloat(bgValues[0]),
                     posPercent = xPosition/100,
                     posDifference = posPercent-0.5;
                     var blurPosition = (function(){
                         var blurPosX = (marqueeWidth*posDifference)+((marqueeWidth-imgWidth)*posDifference);
                         return blurPosX;
                     });
                     if(xPosition==50){
                         $('.blurBg > image').attr('x', 0);
                     }else{
                         $('.blurBg > image').attr('x', blurPosition());
                     }
               }).resize();
            });
            imgSize();
         }
		});
	}
	else{
		$('.blur-overlay').each(function(){
      	if($(this).not('[data-dom="ready"]')){
            $(this).attr('data-dom','ready');

            var getId = $(this).attr('data-blur-what');
            // add blurBg overlay
            $(this).before('<div class="blurBg" id="'+ getId +'-blurIMG"></div>');
         }
		});
		DS2.setBlur();
	}
});
DS2.setBlur = (function(){
    setTimeout(function() {
        $('.blur-overlay').each(function(){
           if($(this).not('[data-dom="ready"]')){
              $(this).attr('data-dom','ready');

              var getId   = $(this).attr('data-blur-what')
                 marquee  = document.getElementById(getId),
                 blur_width = marquee.offsetWidth,
                 blur_height = marquee.offsetHeight,
                 bgImg    = DS2.getProperties(marquee, 'background-image'),
                 bgPos    = DS2.getProperties(marquee, 'background-position'),
                 bgSize   = DS2.getProperties(marquee, 'background-size');
                 blurBg   = getId + '-blurIMG',
                 overlayY = $(this).offset().top - $('#'+ blurBg).offset().top,
                 overlayX = $(this).offset().left - $(this).offsetParent().offset().left,
                 overlayW = $(this).outerWidth(),
                 overlayH = $(this).outerHeight();
              
              
              if($(this).hasClass('promo-overlay')){                 
                var newClip  = 'rect(' + overlayY + 'px, ' + (overlayW + overlayX) + 'px, ' + (overlayH + overlayY + 10) + 'px, ' + overlayX + 'px)',
                    clipPath = 'inset(' + overlayY + 'px ' + (overlayW + overlayX) + 'px ' + (overlayH + overlayY + 10) + 'px ' + overlayX + 'px)';
                
                $("#" + blurBg).css({
                    'background-image': bgImg,
                    'background-position': bgPos,
                    'background-size': bgSize,
                    'clip': newClip,
                    'clip-path': clipPath,
                    'height': blur_height + 10,
                    'width': blur_width
                 });
              }
              else{
                 var newClip  = 'rect(' + overlayY + 'px, ' + (overlayW + overlayX) + 'px, ' + (overlayH + overlayY) + 'px, ' + overlayX + 'px)',
                    clipPath = 'inset(' + overlayY + 'px ' + (overlayW + overlayX) + 'px ' + (overlayH + overlayY) + 'px ' + overlayX + 'px)';
                 
                 $("#" + blurBg).css({
                    'background-image': bgImg,
                    'background-position': bgPos,
                    'background-size': bgSize,
                    'clip': newClip,
                    'clip-path': clipPath,
                    'height': blur_height,
                    'width': blur_width
                 });
              }
           }
        });
    }, 300);
});

DS2.progressBar = function(){
   // USAGE INDICATOR ANIMATION
   $('.progress').each(function(){
      if($('#ds2-progressbarCSS').length == '0'){
         $('head').append('<link id="ds2-progressbarCSS" rel="stylesheet" type="text/css" href="' + $thisDomain + '/css/ds2-progressbar.min.css?timestamp=1475514226113">');
      }

      if($(this).not('[data-dom="ready"]')){
         $(this).attr('data-dom','ready');

         $('#ds2-progressbarCSS').on('load', function(){
            $('.progress > [data-percentage]').each(function () {
               var barWidth = $(this).attr('data-percentage');
               $(this).animate({
                  'width': barWidth + '%'
               }, 2000);
            });
         })
      }
      if($(this).hasClass('ajaxed')){
         $('#ds2-progressbarCSS').remove();
         if($('#ds2-progressbarCSS').length == '0'){
            $('head').append('<link id="ds2-progressbarCSS" rel="stylesheet" type="text/css" href="' + $thisDomain + '/css/ds2-progressbar.min.css?timestamp=1475514226113">');
         }
      }
   });
};

/* ===================================================
 * ADAPTIVE SELECT ELEMENT SKIN v2.0.0
 * http://quickstart.att.com/digitaldesign
 * ===================================================
 * Copyright 2015 AT&T, Inc.
 *
 * Description: The options of a dropdown cannot be styled
 * but a custom dropdown can. This function takes a normal
 * select element and converts it into the appropriate div
 * structure and applies the necessary functionality for it
 * to work like a traditional select dropdown.
 *
 * This version allows mobile devices to continue using the
 * traditional Sandbox 3.2.0 version of the select element
 * while providing a more robust version to desktops.
 * ========================================================== */
DS2.wrapSelect = function () {
   // IF MOBILE
   $('select.awd-select').not('.isWrapped').each(function () {
      var sel = $(this);
      var selectedText = $(':selected', $(this)).text();

      if (isMobile) {
         $(this).addClass('isWrapped').wrap('<span class="selectWrap"></span>');
         $(this).parent().append('<span aria-hidden="true">' + selectedText + '</span>');
         if($(this).is(':disabled')){
            $(this).closest('.selectWrap').addClass('disabled');
         }
         
         $(this).on('change', function (e) {
            var selectedText = $(':selected', $(this)).text();
            $(this).next().text(selectedText);
            $(this).focus();
            DS2.modSelectPlaceholder();
         });
      }
      DS2.modSelectPlaceholder();
   });

   // DESKTOP
   if (notMobile) {
      $('select.awd-select').not('.isWrapped').each(function () {
         if( $(this).hasClass('large') ){
            $(this).addClass('isWrapped closed').wrap('<span class="selectWrap large"></span>');
         }
         else{
            $(this).addClass('isWrapped closed').wrap('<span class="selectWrap"></span>');
         }

         $('select.awd-select optgroup').each(function () {
            var optLabel = $(this).attr('label');
            if (typeof optLabel !== typeof undefined && optLabel !== false) {
               var $optLabel = optLabel
            }
            $(this).wrapAll('<li class="optgroup-wrapper">' + $optLabel + '</li>');
            $(this).replaceWith(function () {
               return $(this).contents();
            });
         });

         $('select.awd-select option').each(function () {
            var isSelected = $(this).attr('selected');
            if (typeof isSelected !== typeof undefined && isSelected !== false) {
               $(this).attr('aria-selected', 'true');
            } 

            var $this = $(this);
            var $props = $this.attr(),
               $oldAttr = [];

            $.each($props, function (name, value) {
               $oldAttr.push(name + '="' + value + '" ');
            });
            var $attr = $oldAttr.join("");

            $('[data-default-placeholder]').each(function () {
               $('[data-default-placeholder]').remove();
            });
            $(this).wrap('<li ' + $attr + ' class="awd-select-list-item" value="' + $(this).attr('value') + '" tabindex="0" role="option">');

            if ($(this).attr('data-img-src')) {
               $(this).prepend('<img src="' + $(this).attr('data-img-src') + '" alt="">');
            }
            $(this).replaceWith(function () {
               return $(this).contents();
            });
         });

         var $this = $(this);
         var $props = $this.attr(),
            $oldAttr = [];

         $.each($props, function (name, value) {
            $oldAttr.push(name + '="' + value + '" ');
         });
         var $attr = $oldAttr.join(""),
         $btext = $this.find($('[data-default-placeholder]')).text();

         $this.before('<input type="hidden" id="' + $this.attr('id') + '-value" class="awd-select-value" role="combobox">');
         
         if($this.attr('select-btn-menu') == "true"){
            var labeltxt=$this.parent().prev().html();            
            $this.before('<button ' + $attr + ' type="button" aria-haspopup="true"  aria-label="'+labeltxt+' list" aria-expanded="false">Select</button>');
         }
         if($this.attr('select-btn-menu') == "false"){
            var labeltxt=$this.parent().prev().html(); 
            $this.before('<input ' + $attr + ' type="text" aria-activedescendant="select" aria-label="'+labeltxt+' list" role="combobox" value="select" readonly aria-expanded="false">') ;

         }
         $this.wrap('<div id="' + $this.attr('id') + '-wrapper" class="selectWrapper"><ul role="menu" aria-label="Choose options" class="awd-select-list" id="' + $this.attr('id') + '-dropdown" tabindex="-1" >');
         $this.replaceWith(function () {
            return $this.contents();
         });
         if($this.is(':disabled')){
            $('#'+ $this.attr('id') + '-wrapper').closest('.selectWrap').addClass('disabled');
         }
      });

      $('li.optgroup-wrapper').each(function () {
         $(this).find('.awd-select-list-item').wrapAll('<ul class="optgroup">');
      });

      $('.awd-select-list-item[aria-selected="true"]').each(function () {
         var selectVal = $(this).attr('value'),
            selectTxt = $(this).html(),
            selectID = $(this).closest('.awd-select-list').parent().prev().attr('id');
            selectAttr=$(this).closest('.awd-select-list').parent().prev().attr('select-btn-menu');              
            selectLabel=$(this).closest('.awd-select-list').parent().parent().prev().html();  

          if(selectAttr=="true"){
         $('#' + selectID).html(selectTxt).removeClass('active').prev().val(selectVal);
          }
         if(selectAttr=="false"){
           $('#' + selectID).attr({'value': selectTxt}).removeClass('active').prev().val(selectVal);
         }
         
         $(this).attr('aria-selected', 'true');
      });

      $('.awd-select-list').slideUp(0);

      $('.awd-select-list-item').each(function () {
         var $this = $(this)

         $this.on('mouseover', function() {
            $this.siblings('.awd-select-list-item').removeAttr('aria-selected').removeAttr('selected');
            $this.attr({'aria-selected':'true','selected':'selected'}).focus();
         });
         
         $this.on('keydown', function (e) {                 
            var selectVal = $(this).attr('value');            
               selectTxt = $(this).html();
               selectID = $(this).closest('.awd-select-list').parent().prev().attr('id');
               selectAttr=$(this).closest('.awd-select-list').parent().prev().attr('select-btn-menu');              
               selectLabel=$(this).closest('.awd-select-list').parent().parent().prev().html();
            if (e.keyCode in keymap) {
               keymap[e.keyCode] = true;
               if(keymap[13] || keymap[27] || keymap[32]) {
                  if(selectAttr=="true"){
                     $('#' + selectID).html(selectTxt).attr({'aria-expanded':'false','aria-label':selectLabel+' '+selectTxt}).removeClass('active').addClass('closed').prev().val(selectVal);
                  }
                  if(selectAttr=="false"){
                     $('#' + selectID).attr({'aria-expanded':'false','value': selectTxt,'aria-label':selectLabel+' '+selectTxt}).removeClass('active').addClass('closed').prev().val(selectVal);
                   }                  
                  $(this).siblings().removeAttr('selected');
                  $(this).attr({
                     'aria-selected': 'true',
                     'selected': 'selected'
                  }).closest('.awd-select-list').slideUp(200);
                  $('#' + selectID).focus(); 
                  isSelected = "true";
                  e.preventDefault();
               }
               if(keymap[9]) {
                  $this.click();
                  $this.closest('.selectWrapper').prev('.awd-select').attr({'aria-label':selectTxt}).focus();
                  e.preventDefault();
               }
               if(keymap[38]) {
                  $this.removeAttr('aria-selected').removeAttr('selected');
                  $this.prev().attr({'aria-selected':'true'}).focus();
                  e.preventDefault();
               }
               if(keymap[40]) {
                  $this.removeAttr('aria-selected').removeAttr('selected');
                  $this.next().attr({'aria-selected':'true'}).focus();
                  e.preventDefault();
               }
            }
         });
         $('input.awd-select').on('keydown',function(e){              
            if (e.keyCode in keymap) {
               keymap[e.keyCode] = true;
               if(keymap[27] || keymap[32]) {                  
                  e.preventDefault(); 
                  if (!$(e.target).prop('disabled') && $(e.target).hasClass("awd-select") && $(e.target).next().find('.awd-select-list').is(':hidden')) {                
                     $(e.target).removeClass('closed').addClass('active').attr('aria-expanded', 'true').next().find('.awd-select-list').slideDown(200, function(){
                        if($(this).find('.awd-select-list-item[selected]').attr('aria-selected') == "true"){
                           $(this).find('.awd-select-list-item[selected]').attr({'aria-selected':'true','selected':'selected'}).focus();
                        }
                        else{
                           $(this).find('.awd-select-list-item:first-child').attr({'aria-selected':'true','selected':'selected'}).focus();
                        }                
                     });
                  }
               }                            
            } 
         });
         
         $(this).on('click', function () {
            var selectVal = $(this).attr('value'),
               selectTxt = $(this).html(),
               selectID = $(this).closest('.awd-select-list').parent().prev().attr('id');
               selectAttr=$(this).closest('.awd-select-list').parent().prev().attr('select-btn-menu');              
               selectLabel=$(this).closest('.awd-select-list').parent().parent().prev().html();
            if(selectAttr=="true"){               
               $('#' + selectID).html(selectTxt).attr({'aria-expanded':'false','aria-label':selectLabel+' '+selectTxt}).removeClass('active').addClass('closed').prev().val(selectVal);
            }
            if(selectAttr=="false"){
               $('#' + selectID).attr({'aria-expanded':'false','value': selectTxt,'aria-label':selectLabel+' '+selectTxt}).removeClass('active').addClass('closed').prev().val(selectVal);
            } 
            $(this).siblings().removeAttr('aria-selected').removeAttr('selected');
            $(this).attr({'aria-selected':'true', 'selected':'selected'}).closest('.awd-select-list').slideUp(200);
            $('#' + selectID).focus();
            isSelected = "true";
         });
      });
   }
   dropdownAutocomplete()
};

DS2.bellyband = (function(){
   $('.bellyband-link').each(function(){
      if($(window).innerWidth() <= '480'){
         $(this).removeAttr('style');
      }
      if($(window).innerWidth() >= '481' && $(window).innerWidth() <= '767'){
         var lnkHeight = $(this).height(),
                lnkMar = $(this).css('margin-bottom');

         if($(this).closest('.bellyband-container').find('.bellyband-link').length == 2){
            bblink = ((lnkHeight + parseInt(lnkMar)) * 1) + 'px';
         }
         else if($(this).closest('.bellyband-container').find('.bellyband-link').length == 3){
            bblink = ((lnkHeight + parseInt(lnkMar)) * 2) + 'px';
         }
         else if($(this).closest('.bellyband-group').find('.bellyband-link').length == 4){
            bblink = ((lnkHeight + parseInt(lnkMar)) * 2) + 'px';
         }  
         else if($(this).closest('.bellyband-container').find('.bellyband-link').length >= 5){
            bblink = ((lnkHeight + parseInt(lnkMar)) * 3) + 'px';
         }
         else{}

         $(this).closest('.bellyband-group').css({'max-height': bblink});         
      }

      else if( $(window).innerWidth() >= '768'){
         $(this).closest('.bellyband-group').css({'max-height':'inherit'});
         if( $(this).closest('.bellyband-group').find('.bellyband-link').length == '6' ){ $(this).css({'flex':'1 1 0'}); }
      }      
   });
});

// STAR RATING
DS2.starRating = function () {
   $('[data-stars-percent]').each(function () {
      if (!$(this).attr('style')) {
         var starPercent = parseInt($(this).attr('data-stars-percent'), 0),
            ratingText = $(this).parent().next('.starsRating').text(),
            newRating = ratingText.replace(/[{()} ]/g, ''),
            starQty = "";

         $(this).css({  'width': starPercent + '%' });

         if (starPercent === "0") {                       starQty = "0"; }
         if (starPercent >  "0" && starPercent <= "10") { starQty = ".5"; }
         if (starPercent > "10" && starPercent <= "20") { starQty = "1"; }
         if (starPercent > "20" && starPercent <= "30") { starQty = "1.5"; }
         if (starPercent > "30" && starPercent <= "40") { starQty = "2"; }
         if (starPercent > "40" && starPercent <= "50") { starQty = "2.5"; }
         if (starPercent > "50" && starPercent <= "60") { starQty = "3"; }
         if (starPercent > "60" && starPercent <= "70") { starQty = "3.5"; }
         if (starPercent > "70" && starPercent <= "80") { starQty = "4"; }
         if (starPercent > "80" && starPercent <= "90") { starQty = "4.5"; }
         if (starPercent > "90" && starPercent <= "100") { starQty = "5"; }

         //$(this).parent().next('.starsRating').next('.hidden-spoken').prepend("Rated " + starQty + " out of 5 stars based on " + newRating).append(" customer reviews.");
         $(this).closest('.starsCan').siblings('.starsRating').attr('aria-label', 'Rated ' + starQty + ' out of 5 stars based on ' + newRating + ' customer reviews.');
      }
   });
};

// BUTTON QUANTITY TOGGLE
DS2.qtyToggle = function () {
   $('.btn-quantity-toggle').each(function () {
      if($(this).not('[data-dom="ready"]')){
         $(this).attr('data-dom','ready');

         var     $this = $(this),
            currentVal = $this.find('input[data-max-quantity]'),
                maxVal = currentVal.attr('data-max-quantity');

         $this.find('input[data-max-quantity]').attr({'value':currentVal.val(), 'aria-valuenow': currentVal.val() });
         if(/iPhone|iPod/i.test(navigator.userAgent)){ $this.find('input[data-max-quantity]').removeAttr('role').attr({'aria-label':'quantity: ' +currentVal.val(), 'aria-live':'off'}); }
         
         if($(this).hasClass('disabled')){
            $(this).find('.btn').attr('disabled', true);
         }
         else{            
            if (currentVal.val() <= "0") {
               currentVal.val('0').attr({'aria-valuenow':'0'});;
   
               currentVal.next().removeAttr('disabled').removeClass('disabled');
               currentVal.prev().attr('disabled', 'disabled').addClass('disabled');
            }
   
            // RESTRICT VALUE FROM GOING OVER MAX QUANTITY ALLOWABLE
            currentVal.on('keyup', function () {
               currentVal.attr('value', $(currentVal).val());
   
               if (currentVal.val() >= parseInt($('[data-max-quantity]').attr('data-max-quantity'))) {
                  currentVal.val(maxVal).attr({'aria-valuenow':maxVal });
                  currentVal.prev().removeAttr('disabled aria-disabled').removeClass('disabled');
                  currentVal.next().attr({'disabled':true, 'aria-disabled':'true'}).addClass('disabled');
                  if(/iPhone|iPod/i.test(navigator.userAgent)){ currentVal.attr({'aria-label':'quantity: ' +maxVal, 'aria-live':'polite' }); }
               } 
               else if (currentVal.val() <= "0") {
                  currentVal.val('0').attr({'aria-valuenow':'0' });
                  currentVal.next().removeAttr('disabled aria-disabled').removeClass('disabled');
                  currentVal.prev().attr({'disabled':true, 'aria-disabled':'true'}).addClass('disabled');
                  if(/iPhone|iPod/i.test(navigator.userAgent)){ currentVal.attr({'aria-label':'quantity: ' +maxVal, 'aria-live':'polite' }); }
               } 
               else {
                  currentVal.next().removeAttr('disabled aria-disabled').removeClass('disabled');
                  currentVal.prev().removeAttr('disabled aria-disabled').removeClass('disabled');
                  return false;
               }
            });
   
            // DECREMENT VALUE UNTIL 0
            $this.find('.btn-prev').on('click', function () {
               if (currentVal.val() == "1") {
                  currentVal.prev().attr({'disabled':true, 'aria-disabled':'true'}).addClass('disabled');
               }
               if (currentVal.val() == "0") {
                  return false;
               } 
               else {
                  currentVal.val(parseInt(currentVal.val()) - 1);
                  currentVal.attr({'value': $(currentVal).val(), 'aria-valuenow':parseInt(currentVal.val()) });
                  currentVal.next().removeAttr('disabled aria-disabled').removeClass('disabled');
                  if(/iPhone|iPod/i.test(navigator.userAgent)){ currentVal.attr({'aria-label':'quantity: ' +currentVal.val(), 'aria-live':'polite' }); }
               }
            });
   
            // INCREMENT VALUE UNTIL MAX QUANTITY REACHED
            $this.find('.btn-next').on('click', function () {
               if (currentVal.val() == parseInt($('[data-max-quantity]').attr('data-max-quantity')) - 1) {
                  currentVal.next().attr('disabled', 'disabled').addClass('disabled');                  
               }
               if (currentVal.val() == parseInt($('[data-max-quantity]').attr('data-max-quantity'))) {
                  currentVal.next().attr('disabled', 'disabled').addClass('disabled');                  
                  return false;
               } 
               else {
                  currentVal.val(parseInt(currentVal.val()) + 1);
                  currentVal.attr({'value': $(currentVal).val(), 'aria-valuenow':parseInt(currentVal.val())});
                  if(/iPhone|iPod/i.test(navigator.userAgent)){ currentVal.attr({'aria-label':'quantity: ' +currentVal.val(), 'aria-live':'polite' }); }
               }
               $this.find('.btn-prev').removeAttr('disabled aria-disabled').removeClass('disabled');               
            });
         }
      }
   });
};

DS2.miscellaneous = (function(){
   pasteEvents = function (delay) {
      if (delay === undefined) {
         delay = 20;
      }
      return $(this).each(function () {
         var $el = $(this);
         $el.on("paste", function () {
            $el.trigger("prepaste");
            setTimeout(function () {
               $el.trigger("postpaste");
            }, delay);
         });
      });
   };
   
   $('[data-colordatatext]').find('button').each(function(){
      var txt     = $(this).attr('aria-label'),
       txtTarget  = $(this).closest('[data-colordatatext]').attr('data-colordatatext');
      
      if($(this).hasClass('active')){
         if($('#'+txtTarget+' span').length == '0'){
            $('#'+txtTarget).append('<span> ' + txt+ '</span>');
         }
         else{
            $('#'+txtTarget+' span').text(' '+txt);
         }
      }
      
      $(this).on('click', function(){
         if($('#'+txtTarget+' span').length == '0'){
            $('#'+txtTarget).append('<span> ' + txt+ '</span>');
         }
         else{
            $('#'+txtTarget+' span').text(' '+txt);
         }
      });
      
   });
   
   $('a[role="button"]').on('keydown', function(e){
      if (e.keyCode in keymap) {
         keymap[e.keyCode] = true;   
         if(keymap[32]) { // spacebar
            $(this).trigger('click');
         }
      }
   });
   
   $('a.share-this').on('click', function(e) {
      if ($('#shareIcons').hasClass('active')) {
         $('#shareIcons').removeClass('active').attr({
            'aria-hidden': 'true'
         });
      } else {
         $('#shareIcons').addClass('active').attr({
            'aria-hidden': 'false'
         });
      }
      e.preventDefault();
   });
   
   isKey = "false";
   $('[data-expand-this]').each(function(){      
      var toggleThis = $(this).attr('data-expand-this');
      
      // CHECKBOX/RADIO EXPAND [slide]
      if($(this).find('input').is(':checked')){
         $(this).find('input[type="checkbox"]').attr('aria-expanded','true');
         $(this).closest('[role="radio"]').attr('aria-expanded','true');
         $('#' + toggleThis).show();
      }
      else{
         $(this).closest('[role="radio"]').attr('aria-expanded','false');
      }
      // CHECKBOX
      if($(this).hasClass('checkbox')){
         $(this).on('click', function(){
            if($(this).find('input').is(':checked')){
               $(this).find('input').attr('aria-expanded','true');
               $('#' + toggleThis).slideDown();
            }
            else{
               $(this).find('input').attr('aria-expanded','false');
               $('#' + toggleThis).slideUp();            
            }
         });     
      }
      // RADIO
      else if($(this).hasClass('radio')){
         $(this).on('change', function(e){      
            $(this).closest('[role="radiogroup"]').find('input[type="radio"]').each(function(){
               var isChecked = $(this).is(':checked') ? 'true' : 'false';
               $(this).closest('[role="radio"]').attr('aria-expanded', isChecked);
               $('#' + $(this).closest('[data-expand-this]').attr('data-expand-this')).slideUp();               
            });
            if($(this).find('input').prop('checked')){
               $('#' + toggleThis).slideDown();
               $(this).find('[role="radio"]').attr('aria-expanded','true');
            }
            
         });
      }
      // DROPDOWNS
      else if($(this).hasClass('awd-select-list-item')){
          $(this).on('mouseup', function(){isKey = "false"; $toggleThisDD  = $(this).attr('data-expand-this');dropDownExpand(); });
          $(this).on('keydown keyup', function(e){
              if(e.keyCode in keymap) { keymap[e.keyCode] = true;
                if(keymap[13]) {isKey = "false"; $toggleThisDD  = $(this).attr('data-expand-this');dropDownExpand();}
              }
          });
          $(this).closest('.selectWrap').find('.awd-select.isWrapped').on('keyup', function(e){
              if(e.keyCode in keymap) { keymap[e.keyCode] = true;
                if(keymap[40] || keymap[38] ) {
                   isKey = "true"; $toggleThisDD = $(this).parent().find('.awd-select-list-item[selected="selected"]').attr('value');
                   dropDownExpand();
                }   
              }
          });
        $(this).closest('.selectWrap').on('keyup', function(e){ var $this = $(this);
            if(e.keyCode >= 48 && e.keyCode <= 105){
                $this.find('.awd-select-list-item').each(function(){
                    if($(this).text() === $this.find('>.awd-select').text()){
                       $(this).trigger('click');$toggleThisDD = $(this).attr('data-expand-this');isKey = "true";dropDownExpand();
                    }
                });
            }
        });
      } // DROPDOWNS Expands Ends
       
   });
      
    //On Change for Mobile
    $('.awd-select').on('change', function(){
        isKey = "false";$toggleThisDD  = $(this).find(':selected').attr('data-expand-this'); dropDownExpand();
        if(typeof $toggleThisDD==="undefined") { 
           $(this).closest('form').find('[data-select-toggle="true"]').addClass('hide').slideUp(1).attr({'aria-hidden': 'true', 'data-select-toggle': 'false'}); 
        }
    });
    //On Change for Mobile Ends
    
   dropDownExpand = function(){ //Dropdown Expand function
      if($('#' + $toggleThisDD).attr('data-select-toggle')=== "false" && $('#' + $toggleThisDD).length!=0) { 
            $('#' + $toggleThisDD).closest('form').find('[data-select-toggle]').addClass('hide').slideUp(1).attr({'aria-hidden': 'true', 'data-select-toggle': 'false'});
            $('#' + $toggleThisDD).removeClass('hide').slideDown().attr({'aria-hidden': 'false', 'data-select-toggle': 'true'});
       } else {
           if((isKey === "true" && $('#' + $toggleThisDD).length===0) || isKey === "false" ){ 
              $('[data-expand-this =' + $toggleThisDD + ']').closest('form').find('[data-select-toggle="true"]').addClass('hide').slideUp(1).attr({'aria-hidden': 'true', 'data-select-toggle': 'false'});
           }
       }
   };
   
   $('a[href$="pdf"].show-qualifier').each(function(){
      $(this).attr('aria-describedby','qualifier-pdf');
      if($('#qualifier-pdf').length == '0'){
         $('body').append('<div id="qualifier-pdf" class="hidden-spoken" aria-hidden="true">A PDF reader is required to read this document.</div>');
      }
   });
   $('a.show-qualifier.pdf').each(function(){
      $(this).attr('aria-describedby','qualifier-pdf');
      if($('#qualifier-pdf').length == '0'){
         $('body').append('<div id="qualifier-pdf" class="hidden-spoken" aria-hidden="true">A PDF reader is required to read this document.</div>');
      }
   });
   $('a[href$="psd"].show-qualifier').each(function(){
      $(this).attr('aria-describedby','qualifier-psd');
      if($('#qualifier-psd').length == '0'){
         $('body').append('<div id="qualifier-psd" class="hidden-spoken" aria-hidden="true">Photoshop is required to open this document.</div>');
      }
   });
   $('a.show-qualifier.psd').each(function(){
      $(this).attr('aria-describedby','qualifier-psd');
      if($('#qualifier-psd').length == '0'){
         $('body').append('<div id="qualifier-psd" class="hidden-spoken" aria-hidden="true">Photoshop is required to open this document.</div>');
      }
   });

   // set color to element, then check if the color is correct. If not, colors have been disabled in the browser.
   if( $('.color-test').length == 0 ){
      $('footer').after('<div class="color-test" style="background-color:orange; height:0">')
   }
   if($('.color-test').css('background-color') != 'rgb(255, 165, 0)'){
      $('html').addClass('ds2-no-colors');
   }

   $('br').attr('aria-hidden','true');

   $('span.copyright').text(new Date().getFullYear());

   $('[data-dismiss="alert"]').on('click', function(){
      $(this).closest('.alert').fadeOut(300, function(){
         $(this).remove();
      });
   });

   $('a.disabled').each(function(){
      $(this).attr({'aria-disabled':'true', 'tabindex':'-1'});
   }).on('click', function(e){
      if($(this).attr('aria-disabled') == 'true'){
         e.preventDefault();
      }
      else{
         return true;
      }
   });   
   $('button:disabled').each(function(){
      $(this).attr({'aria-disabled':'true'});
   });
   
   $('.truncate').each(function () { // because to add elipsis you must specify width of container
      $(this).css({
         'width': $(this).width()
      });
   });

   // Make font smaller
   $('.small, small').each(function(){
      var pSize = $(this).parent().css('font-size'),
         newSize = ((parseInt(pSize) * .1) - .2) + 'rem';
      $(this).css({
         'font-size':newSize
      });
   });

   // CHECKBOX ACTIVATES BUTTON
   $(document).on('click', 'input', function (e) {
      if ($(this).attr('data-activate-button')) {
         var theBtn = $(this).attr('data-activate-button');
         if ($(this).is(':checked')) {
            $('#' + theBtn).removeAttr('disabled');
         }
         else {
            $('#' + theBtn).attr('disabled', 'disabled');
         }
      }
   });

   // Enter checks checkbox
   $('.checkbox input').on('keydown',function(e){
      if (e.keyCode in keymap) {
         keymap[e.keyCode] = true;
         if(keymap[13]) {
            //$(this).prop('checked', !$(this).prop('checked') );
            $(this).trigger('click');
         }
      }
      e.stopPropagation();
   });

   // ERROR MSG LINKS
   $('.alert-error a').on('click', function (e) {
      var lnk = $(this).attr('href'),
         lnktemp = lnk.split("#"),
         focusTo = lnktemp[1];

      $('#' + focusTo).focus();
      e.preventDefault();
   });

   // external modal
   $('[data-same-domain="false"]').on('click', function (e) {
      e.preventDefault();
      var url = $(this).attr('href'),
         target = $(this).attr('data-target');
      $(target).html('<iframe width="100%" height="100%" frameborder="0" scrolling="no" allowtransparency="true" src="' + url + '"></iframe>');
   });

   // Scroll to something
   $(document).on('click', '.scroll', function () {
      if (location.pathname.replace(/^\//, '') === this.pathname.replace(/^\//, '') || location.hostname === this.hostname) {
         var target = $(this.hash);
         target = target.length ? target : $('[name=' + this.hash.slice(1) + ']');
         if (target.length) {
            if( $('.stickypad').length != '0' ){
               $('html,body,.modal-body').animate({
                  scrollTop: target.offset().top - 85
               }, 1000);
               return false;
            }
            else{
               $('html,body,.modal-body').animate({
                  scrollTop: target.offset().top
               }, 1000);
               return false;
            }
         }
      }
   });

});




/* IMMEDIATELY ENVOKED */
! function ($) {
   "use strict";

   var d = new Date(),
      h = d.getHours(),
      m = d.getMinutes(),
      n = d.getSeconds();

   if(isIE){   $('html').addClass('isIE'); }
   if(/Android/i.test(navigator.userAgent)) { $('html').addClass('isAndroid'); }
   if(/iPhone|iPod/i.test(navigator.userAgent)) {$('html').addClass('isIOS'); }
   if(isMobile){ $('html').addClass('isMobile'); }
   
   // MODAL ADJUSTMENT
   DS2.modalDockedButtons = function () {
      var $this = $('.modal.in'),
         $headHeight = $this.find('.modal-header').outerHeight(),
         $footHeight = $this.find('.modal-footer').outerHeight(),
         $modalHeight = $this.outerHeight(),
         $windowHeight= $(window).innerHeight();

      if ($headHeight === null || $headHeight === -1) {
         $headHeight = '0';
      }
      if ($footHeight === null || $footHeight === -1) {
         $footHeight = '0';
      }
      var $portraitHeight = $windowHeight - ($headHeight + $footHeight) + 'px';
      var $landscapeHeight = $modalHeight - ($headHeight + $footHeight) + 'px';

      if($this.closest('.modalwrapper').hasClass('modal-docked')){
         // if portrait
         if (window.innerHeight > window.innerWidth) {
            $this.closest('.modalwrapper.active').removeClass('modal-landscape');
            $this.css({'height':'100%'});
            $this.find('.modal-body').css({'height': $landscapeHeight});
         }
         // if landscape
         else if (window.innerHeight < window.innerWidth && window.innerWidth < 767) {
            $this.closest('.modalwrapper.active').addClass('modal-landscape');
            $this.removeAttr('style');
            $this.find('.modal-body').removeAttr('style');
         }
         else if (window.innerHeight < window.innerWidth && window.innerWidth > 767) {
            $this.closest('.modalwrapper.active').addClass('modal-landscape');
            $this.removeAttr('style');
            $this.find('.modal-body').removeAttr('style').css({'height': $landscapeHeight});
         }
         //$this.find('.modal-body').attr('tabindex', '0');
      }

      DS2.wrapSelect();
   };

   // Calculate tallest/shortest/widest/thinnest size of group of elements
   $.fn.tallest = function () {      return this.eXtremities({ 'aspect': 'innerHeight', 'max': true })[0]; };
   $.fn.tallestSize = function () {  return this.eXtremities({ 'aspect': 'innerHeight', 'max': true })[1]; };
   $.fn.shortest = function () {     return this.eXtremities({ 'aspect': 'innerHeight', 'max': false })[0]; };
   $.fn.shortestSize = function () { return this.eXtremities({ 'aspect': 'innerHeight', 'max': false })[1]; };
   $.fn.widest = function () {       return this.eXtremities({ 'aspect': 'innerWidth', 'max': true })[0]; };
   $.fn.widestSize = function () {   return this.eXtremities({ 'aspect': 'innerWidth', 'max': true })[1]; };
   $.fn.thinnest = function () {     return this.eXtremities({ 'aspect': 'innerWidth', 'max': false })[0]; };
   $.fn.thinnestSize = function () { return this.eXtremities({ 'aspect': 'innerWidth', 'max': false })[1]; };

   $.fn.eXtremities = function (options) {
      var defaults = {
            aspect: 'height',
            max: true
         },
         bestIndex = 0,
         bestSize = this.eq(0)[options.aspect](),
         thisSize;

      if (this.length < 2) {
         return [this, this[options.aspect]()];
      }

      for (var i = 1; i < this.length; ++i) {
         var thisSize = this.eq(i)[options.aspect]();
         if ((options.max && thisSize > bestSize) || (!options.max && thisSize < bestSize)) {
            var bestSize = thisSize;
            bestIndex = i;
         }
      }
      return [this.eq(bestIndex), bestSize];
   };


   //
   /* ============================================================
    * bootstrap-button.js v2.3.2
    * http://twitter.github.com/bootstrap/javascript.html#buttons
    * ============================================================
    * Copyright 2012 Twitter, Inc.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    * http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    * ============================================================ */
   /* BUTTON PUBLIC CLASS DEFINITION
    * ============================== */
   var Button = function (element, options) {
      this.$element = $(element);
      this.options = $.extend({}, $.fn.button.defaults, options)
   };

   Button.prototype.setState = function (state) {
      var d = 'disabled'
       , $el = this.$element
       , data = $el.data()
       , val = $el.is('input') ? 'val' : 'html';

      state = state + 'Text';
      data.resetText || $el.data('resetText', $el[val]());

      $el[val](data[state] || this.options[state]);

      // push to event loop to allow forms to submit
      setTimeout(function () {
         state == 'loadingText' ? $el.addClass(d).attr({'disabled':'disabled', 'aria-disabled':'true'}) : $el.removeClass(d).removeAttr('disabled aria-disabled')
      }, 0)
   };

   Button.prototype.toggle = function () {
      // checkbox rules
      if(this.$element.attr('data-toggle') == "button"){
         this.$element.toggleClass('active').trigger('state_change');
      }
      else if(this.$element.closest('.btn-group').attr('data-toggle') == "button"){

         this.$element.toggleClass('active').trigger('state_change');

         if(this.$element.hasClass('active')){
            this.$element.attr({'aria-checked':'true'});            
         }
         else {
            this.$element.attr({'aria-checked':'false'});
         }

      }
      else if(this.$element.closest('.btn-group').attr('data-toggle') == "buttons-radio"){
         var $parent = this.$element.closest('[data-toggle="buttons-radio"]');

         $parent && $parent
         .find('.active')
         .removeClass('active')
         .attr({'aria-checked':'false'});

         this.$element.toggleClass('active').trigger('state_change');

         if(this.$element.hasClass('active')){
            this.$element.attr({'aria-checked':'true'}); //append('<span class="hidden-spoken dynamic-text"> is selected</span>')
         }
         else {
            this.$element.attr({'aria-checked':'false'}); //.find('.dynamic-text').remove();
         }
      }

      $("#" + this.$element.attr('data-show-id')).slideDown(300).attr('aria-hidden','false');
      $("#" + this.$element.attr('data-hide-id')).slideUp(300).attr('aria-hidden','true');

   };

   /* BUTTON PLUGIN DEFINITION
   * ======================== */
   var old = $.fn.button;

   $.fn.button = function (option) {
      return this.each(function () {
         var $this = $(this)
         , data = $this.data('button')
         , options = typeof option == 'object' && option;
         if (!data) $this.data('button', (data = new Button(this, options)));
         if (option == 'toggle') data.toggle();
         else if (option) data.setState(option)
      })
   };

   $.fn.button.defaults = {
      loadingText: 'Loading'
   };

   $.fn.button.Constructor = Button;

   /* BUTTON NO CONFLICT
   * ================== */
   $.fn.button.noConflict = function () {
      $.fn.button = old;
      return this
   };

   /* added by do6596 - BUTTON LOADING MSG */
   $(document).on('click.button.data-api', '[data-loading-text]', function(e) {
      var $btn = $(e.target);
      $btn.button('loading');
   });

   /* BUTTON DATA-API
   * =============== */

   $(document).on('click.button.data-api', '[data-toggle^=button]', function (e) {
      var $btn = $(e.target);
      if (!$btn.hasClass('btn') ){
         $btn = $btn.closest('.btn').not(':disabled');
      }
      $btn.button('toggle');
   });

   /* ===================================================
    * ACCORDION / TAB
    * http://quickstart.att.com/digitaldesign
    * ===================================================
    * Copyright 2016 AT&T, Inc.
    *
    * Description: This component will allow you to dispaly in the following ways:
    *    - Tabs on desktop, tablet and phone.
    *    - Tabs on desktop/tablet, and accordions on tablet/phone.
    *    - Accordion on desktop, tablet and phone.
    * ========================================================== */
   $(function () {

      DS2.tabaccordion = function(){
         $('head').append('<link id="accordion-css" rel="stylesheet" type="text/css" href="' + $thisDomain + '/css/ds2-accordion.min.css?timestamp=1471466286406">');

         $('#accordion-css').on('load', function(){
            
            $('.toggle-header').on('keydown', function (e) {
               if (e.keyCode == "13" || e.keyCode == "32") {
                  $(this).trigger('click');
                  e.preventDefault();
               }
            });
            
            $('.toggle-header').on('keydown', function (e){               
               var $this = $(this);               
               if (e.keyCode in keymap) {
                  keymap[e.keyCode] = true;
                  if(keymap[38] || keymap[37]){
                     var index = $(this).index();                     
                     if(($this).is('.toggle-header:first-of-type')){                        
                              if(($this).parent().hasClass('tiny-tabs')){                        
                              $this.parent().children('.toggle-header:eq('+parseInt($this.parent().children('.toggle-header').length-1)+')').focus().trigger('click').attr({'tabindex':'0'});
                              $this.attr({'tabindex':'-1'})
                              }
                              else if((($this).parent().hasClass('tiny-accordion-to-tabs'))&&($(window).innerWidth() > 767)){
                              $this.parent().children('.toggle-header:eq('+parseInt($this.parent().children('.toggle-header').length-1)+')').focus().trigger('click').attr({'tabindex':'0'});
                              $this.attr({'tabindex':'-1'})
                              }
                              else{
                               $this.parent().children('.toggle-header:eq('+parseInt($this.parent().children('.toggle-header').length-1)+')').focus().attr({'tabindex':'0'});
                              $this.attr({'tabindex':'-1'})
                              }
                        }
                        else{                                                
                                 if(($this).parent().hasClass('tiny-tabs')){ 
                                     $this.prev().prev().focus().trigger('click').attr({'tabindex':'0'});
                                     $this.attr({'tabindex':'-1'})
                                 }
                                 else if((($this).parent().hasClass('tiny-accordion-to-tabs'))&&($(window).innerWidth() > 767)){ 
                                    $this.prev().prev().focus().trigger('click').attr({'tabindex':'0'});
                                 $this.attr({'tabindex':'-1'})
                                 }                       
                                 else{
                                    $this.prev().prev().focus().attr({'tabindex':'0'});
                                    $this.attr({'tabindex':'-1'})
                               }
                        }
                      e.preventDefault();
                     }
               
               if(keymap[39] || keymap[40]){
                  var index=$(this).index();
                  if(index+2<($(this).parent().children('.toggle-header').length*2)){                                    
                           if(($this).parent().hasClass('tiny-tabs')){ 
                           $this.next().next().focus().trigger('click').attr({'tabindex':'0'});
                           $this.attr({'tabindex':'-1'})
                              }
                           else if((($this).parent().hasClass('tiny-accordion-to-tabs'))&&($(window).innerWidth() > 767)){                           
                           $this.next().next().focus().trigger('click').attr({'tabindex':'0'});
                           $this.attr({'tabindex':'-1'})
                           }
                           else{                    
                           $this.next().next().focus().attr({'tabindex':'0'});
                           $this.attr({'tabindex':'-1'})
                           }
                  }
                  else{                    
                        if(($this).parent().hasClass('tiny-tabs')){ 

                           $this.parent().children('.toggle-header:eq(0)').focus().trigger('click').attr({'tabindex':'0'});
                           $this.attr({'tabindex':'-1'})
                          }
                          else if((($this).parent().hasClass('tiny-accordion-to-tabs'))&&($(window).innerWidth() > 767)){                           
                           $this.parent().children('.toggle-header:eq(0)').focus().trigger('click').attr({'tabindex':'0'});
                          $this.attr({'tabindex':'-1'})
                          }
                        else{                     
                           $this.parent().children('.toggle-header:eq(0)').focus().attr({'tabindex':'0'});
                           $this.attr({'tabindex':'-1'})
                        }
                  }
                  e.preventDefault();                  
               }
               //home key 
               if(keymap[36]){
                  $(this).parent('.tiny-tabs').children('.toggle-header:first-of-type').focus().trigger('click').attr({'tabindex':'0'});
                  $(this).parent('.tiny-accordion').children('.toggle-header:first-of-type').focus().attr({'tabindex':'0'});
                  $(this).parent('.tiny-accordion-to-tabs').children('.toggle-header:first-of-type').focus().trigger('click').attr({'tabindex':'0'});                  
                   e.preventDefault();
               }
               //end key
               if(keymap[35]){                  
                 $(this).parent('.tiny-tabs').children('.toggle-header').last().focus().trigger('click').attr({'tabindex':'0'});
                  $(this).parent('.tiny-accordion').children('.toggle-header').last().focus().attr({'tabindex':'0'});
                  $(this).parent('.tiny-accordion-to-tabs').children('.toggle-header').last().focus().trigger('click').attr({'tabindex':'0'});                  
                   e.preventDefault();
               }
               }
            });
                 //Crtl+up , home,end
            $('.toggle-header +').on('keydown', function (e){   
               var $this = $(this);               
               if (e.keyCode in keymap) {
                  keymap[e.keyCode] = true;                   
                  if((keymap[36])){
                   e.preventDefault();                     
                  $(this).closest('.accordion-content').parent('.tiny-tabs,.tiny-accordion-to-tabs').children('.toggle-header:first-of-type').focus().trigger('click').attr({'tabindex':'0'});
                  $(this).closest('.accordion-content').parent().children('.toggle-header:first-of-type').focus().attr({'tabindex':'0'});                   
                  
               }
               if(keymap[35]){                  
                    $(this).closest('.accordion-content').parent('.tiny-tabs,.tiny-accordion-to-tabs').children('.toggle-header').last().focus().trigger('click').attr({'tabindex':'0'});
                   $(this).closest('.accordion-content').parent().children('.toggle-header').last().focus().attr({'tabindex':'0'});                                                  
                   e.preventDefault();
               }
               if(keymap[17] && keymap[38]){                                 
                    if($(this).closest('.accordion-content')){                   
                     $(this).closest('.accordion-content').prev().focus().attr({'tabindex':'0'}); 
                    }
                  }
               }               
            });

            $('.toggle-header').not('.opened').addClass('closed').attr({'aria-expanded': 'false'}).next().slideUp(0).attr({'aria-hidden': 'true'});
            $('.toggle-header.opened').attr({'aria-expanded': 'true'}).next().slideDown(0).attr({'aria-hidden': 'false'});
            $('.toggle-header > i.icon-accordion-minus').removeClass().addClass('icon-accordion-plus');
            $('.toggle-header.opened').find('i.icon-accordion-plus').removeClass().addClass('icon-accordion-minus');
            
            // check width of all tabs and determine when to convert to accordions
            var maxTabWidth = 0;
            $('.tiny-accordion-to-tabs').each(function(){
               var $this = $(this);
               $this.find('.toggle-header').each(function(){
                  var tabLength = $(this).length,
                  tabWidth = $(this).outerWidth() +5;
                  maxTabWidth += tabWidth;      
               });              
               
               $this.attr('data-max-width', maxTabWidth);
               
               if($this.attr('data-max-width') > $('.fluid-space').innerWidth() ){
                  $this.removeClass('tiny-accordion-to-tabs').addClass('tiny-accordion changed-by-accordion').css({'height':'auto'});
               }
               else{
                  $this.removeClass('tiny-accordion changed-by-accordion').addClass('tiny-accordion-to-tabs');
               }
               maxTabWidth = 0;
            });
            
            
            if( $(window).innerWidth() > 767 ){
               $('.tiny-tabs, .tiny-accordion-to-tabs').each(function(){
                  $(this).css({
                     'height': $(this).find('.opened').next().outerHeight() + 70
                  });                  
               });
            }
            
            if( $(window).innerWidth() < 767 ){
               $('.tiny-tabs').each(function(){
                  $(this).css({
                     'height': $(this).find('.opened').next().outerHeight() + 70
                  });                                  
               });               
            }            
            
            $(window).on("resize", function () {
               $('[data-max-width]').each(function(){                  
                  if($(this).attr('data-max-width') > $('.fluid-space').innerWidth() ){
                     $(this).removeClass('tiny-accordion-to-tabs').addClass('tiny-accordion changed-by-accordion').css({'height':'auto'});
                  }
                  else{
                     $(this).removeClass('tiny-accordion changed-by-accordion').addClass('tiny-accordion-to-tabs');
                  }
               });               
               
               if( $(window).innerWidth() < 767){
                  $('.tiny-tabs').each(function(){
                     $(this).css({
                        'height': $(this).find('.opened').next().outerHeight() + 70
                     });
                  });
               }
               
               if( $(window).innerWidth() > 767){
                  $('.tiny-tabs, .tiny-accordion-to-tabs').each(function(){
                     $(this).css({
                        'height': $(this).find('.opened').next().outerHeight() + 70
                     });
                  });
               }
            })

            $('.toggle-header').on('click', function (e) {
               if ( $(this).closest('[class*="tiny-"]').hasClass('single') ) {
                  
                  if ( $(this).hasClass('closed') ) {
                     $(this).siblings().find('i.icon-accordion-minus').removeClass().addClass('icon-accordion-plus');
                     $(this).find('i.icon-accordion-plus').removeClass().addClass('icon-accordion-minus');
                     $(this).siblings('.toggle-header').removeClass('opened').addClass('closed').attr({
                        'aria-selected': 'false',
                        'aria-expanded': 'false',
                        'tabindex'     :  '-1',
                     });
                     $(this).removeClass('closed').addClass('opened').attr({
                       'aria-selected': 'true',
                        'aria-expanded': 'true',
                        'tabindex'     :  '0',
                     });

                     // if always an accordion
                     if($(this).closest('.tiny-accordion').hasClass('tiny-accordion')){

                        $(this).siblings('.toggle-header +').slideUp(300).attr({
                           'aria-hidden': 'true'
                        });
                        $(this).next().slideDown(300, function () {
                           if ($(this).parent().attr('data-scroll-top') != "false") {
                              $("html,body").animate({
                                 scrollTop: $(this).prev().offset().top - 65
                              }, 500);
                           }
                        }).attr({
                           'aria-hidden': 'false'
                        });

                     }
                     // if accordion on desktop and tabs on mobile
                     else if($(this).closest('.tiny-accordion-to-tabs').hasClass('tiny-accordion-to-tabs')){
                        // if mobile
                        if($(window).innerWidth() < 767){
                           $(this).closest('.tiny-accordion-to-tabs').removeAttr('style');
                           $(this).siblings('.toggle-header +').slideUp(300).attr({
                              'aria-hidden': 'true'
                           });
                           $(this).next().slideDown(300, function () {
                              if ($(this).parent().attr('data-scroll-top') != "false") {
                                 $("html,body").animate({
                                    scrollTop: $(this).prev().offset().top
                                 }, 500);
                              }
                           }).attr({
                              'aria-hidden': 'false'
                           });
                        }
                        // if desktop
                        else{
                           $(this).parent().find('.toggle-header').each(function(){
                              if($(this).hasClass('opened')){
                                 $(this).parent().find('.hidden-spoken').remove();
                              }
                           });
   
                           if($('.toggle-header').hasClass('closed')){
                              $(this).append('<span class="hidden-spoken">Click to read content</span>');
                           }
   
                           $(this).closest('.tiny-accordion-to-tabs').css({
                              'height': $(this).closest('.tiny-accordion-to-tabs').find('.opened').next().outerHeight() + 70
                           });
   
                           $(this).siblings('.toggle-header +').fadeOut(300).attr({
                              'aria-hidden': 'true'
                           });
                           $(this).next().fadeIn(300).attr({
                              'aria-hidden': 'false'
                           });
                        }
   
                     }
                     // if tabs on desktop and tabs on mobile
                     else if($(this).closest('.tiny-tabs').hasClass('tiny-tabs')){
                        $(this).parent().find('.toggle-header').each(function(){
                           if($(this).hasClass('opened')){
                              $(this).parent().find('.hidden-spoken').remove();
                           }
                        })
   
                        if($('.toggle-header').hasClass('closed')){
                           $(this).append('<span class="hidden-spoken">Click to read content</span>');
                        }
   
                        $(this).closest('.tiny-tabs').css({
                           'height': $(this).closest('.tiny-tabs').find('.opened').next().outerHeight() + 70
                        });
   
                        $(this).siblings('.toggle-header +').fadeOut(300).attr({
                           'aria-hidden': 'true'
                        });
                        $(this).next().fadeIn(300).attr({
                           'aria-hidden': 'false'
                        });
   
                     }
                     else{
   
   
   
                     }
                  }
                  else { // if opened
                     $(this).find('.icon-accordion-minus').removeClass().addClass('icon-accordion-plus');
                     if($(this).closest('.tiny-accordion').hasClass('tiny-accordion')){
                        $(this).removeClass('opened').addClass('closed').attr({
                           'aria-selected': 'false',
                           'aria-expanded': 'false'
                        });
                        $(this).next().slideUp(300).attr({
                           'aria-hidden': 'true'
                        });
                     }
   
                     else if( $(this).closest('.tiny-accordion-to-tabs').hasClass('tiny-accordion-to-tabs') && $(window).innerWidth() < 768 ){
                        $(this).removeClass('opened').addClass('closed').attr({
                           'aria-selected': 'false',
                           'aria-expanded': 'false'
                        });
                        $(this).next().slideUp(300).attr({
                           'aria-hidden': 'true'
                        });
                     }
   
                  }
                  e.preventDefault();
               }
               // allow multiple accordions open at same time
               else {
                  if ($(this).hasClass('closed')) {
                     $(this).find('.icon-accordion-plus').removeClass().addClass('icon-accordion-minus');
                     $(this).siblings('.toggle-header').attr({
                        'aria-selected': 'false'
                     });
                     $(this).removeClass('closed').addClass('opened').attr({
                        'aria-selected': 'true',
                        'aria-expanded': 'true'
                     });
                     $(this).next().slideDown(300).attr({
                        'aria-hidden': 'false',
                        'data-scroll-position': $(document).scrollTop()
                     });
                     if ($(this).closest('[class*="tiny-"]').attr('data-scroll-top') != "false") { // if data-scroll-top="false" exists, do not scroll
                        $("html,body").animate({
                           scrollTop: $(this).offset().top
                        }, 500);
                     }
                  } 
                  else {
                     $(this).find('.icon-accordion-minus').removeClass().addClass('icon-accordion-plus');
                     $(this).removeClass('opened').addClass('closed').attr({
                        'aria-selected': 'false',
                        'aria-expanded': 'false'
                     });
                     $(this).next().slideUp(300).attr({
                        'aria-hidden': 'true'
                     });
                  }
                  e.preventDefault();
               }
            });
         });
         
      };
      
   })


   /* ===================================================
    * RETURN FOCUS TO TRIGGER AFTER VIDEO CLOSES v1.0.0
    * http://quickstart.att.com/digitaldesign
    * ===================================================
    * Copyright 2014 AT&T, Inc.
    *
    * Description: After video is played in a mobile device's
    * native player, focus is lost and page is returned to top
    * of screen when player closes.
    *
    * This function will set localStorage of last clicked
    * element that has a class="return-focus-here". When
    * video closes, script checks if localStorage contains
    * 'lastclicked' key. If so, sets focus to last clicked
    * element. After clicking anywhere else on page the localstorage
    * key is removed.
    * ========================================================== */
   $(function () {
      // Return to last clicked element from native video player while VoiceOver & Talkback running
      if (localStorage.getItem("storedClick") != null) {
         $('body').attr('data-return-focus-to', localStorage.getItem("storedClick"));
      }
      $('.jshook-return-focus-here').on('click', function (e) {
         localStorage.setItem("storedClick", $(this).attr('id'));
         $('body').attr('data-return-focus-to', localStorage.getItem("storedClick"));
      })
   });

   $(window).on('load', function () {
      var returnFocusTo = $('body').attr('data-return-focus-to');
      if (returnFocusTo) {
         setTimeout('$.fn.getId', 2000);
         $('#' + returnFocusTo).attr('tabindex', '0').focus();
      }
      $.fn.getId = function () {
         return $('#' + returnFocusTo).attr('tabindex', '0').focus()
      }
   });


   /* ===================================================
    * SUPER SIMPLE ALERT CLOSER v1.0.0
    * http://quickstart.att.com/digitaldesign
    * ===================================================
    * Copyright 2015 AT&T, Inc.
    *
    * Description: A simple close and remove function.
    *
    * Unlike the previous function, this does exactly
    * what we need with only a few lines of code.
    * ========================================================== */
   $(function () {
      $('.alert .close').on('click', function () {
         $(this).closest('.alert').fadeOut(100, "linear", function () {
            $(this).remove()
         })
      });
   })


   /* ===================================================
    * bootstrap-transition.js v2.3.2
    * http://twitter.github.com/bootstrap/javascript.html#transitions
    * ===================================================
    * Copyright 2012 Twitter, Inc.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");
    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    * http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    * ========================================================== */

   $(function () {
      $.support.transition = (function () {
         var transitionEnd = (function () {
            var el = document.createElement('bootstrap'),
               transEndEventNames = {
                  'WebkitTransition': 'webkitTransitionEnd',
                  'MozTransition': 'transitionend',
                  'OTransition': 'oTransitionEnd otransitionend',
                  'transition': 'transitionend'
               },
               name;

            for (name in transEndEventNames) {
               if (el.style[name] !== undefined) {
                  return transEndEventNames[name]
               }
            }

         }());

         return transitionEnd && {
            end: transitionEnd
         }

      })()
   })

   /* =========================================================
    * bootstrap-modal.js v2.3.2
    * http://twitter.github.com/bootstrap/javascript.html#modals
    * =========================================================
    * Copyright 2012 Twitter, Inc.
    *
    * Licensed under the Apache License, Version 2.0 (the "License");

    * you may not use this file except in compliance with the License.
    * You may obtain a copy of the License at
    *
    * http://www.apache.org/licenses/LICENSE-2.0
    *
    * Unless required by applicable law or agreed to in writing, software
    * distributed under the License is distributed on an "AS IS" BASIS,
    * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    * See the License for the specific language governing permissions and
    * limitations under the License.
    * ========================================================= */
   /* MODAL CLASS DEFINITION
    * ====================== */

   var Modal = function (element, options) {
      this.options = options;
      this.$element = $(element).delegate('[data-dismiss="modal"]', 'click.dismiss.modal', $.proxy(this.hide, this));
      this.options.remote && this.$element.load(this.options.remote);
   };

   Modal.prototype = {
      constructor: Modal,
      toggle: function () {
         return this[!this.isShown ? 'show' : 'hide']()
      },

      show: function () {
         $('body').attr('data-scroll-position', $(document).scrollTop());
         this.$element.closest('.modalwrapper').addClass('active');

         var that = this,
            e = $.Event('show');

         this.$element.trigger(e);

         if (this.isShown || e.isDefaultPrevented()) return;

         this.isShown = true;

         this.escape();

         this.backdrop(function () {
            var transition = $.support.transition && that.$element.hasClass('fade');

            if (!that.$element.parent().length) {
               that.$element.appendTo(document.body); //don't move modals dom position
            }

            that.$element.show();

            if (transition) {
               that.$element[0].offsetWidth // force reflow
            }

            that.$element
               .addClass('in')
               .attr({
                  'aria-hidden': 'false',
                  'tabindex': '-1'
               });

            $('body > header, body > div, body > footer').not('.modal.fade').not('.modalwrapper').addClass('hidden-by-modal').attr('aria-hidden', 'true');

            transition ?
               that.$element.one($.support.transition.end, function () {
                  that.$element.focus().trigger('shown')
               }) :
               that.$element.focus().trigger('shown');
               
            that.enforceFocus();
            
         })
      },

      hide: function (e) {
         e && e.preventDefault();

         var that = this;

         e = $.Event('hide');

         this.$element.trigger(e);

         if (!this.isShown || e.isDefaultPrevented()) return;

         this.isShown = false;

         this.escape();

         $(document).off('focusin.modal');

         this.$element
            .removeClass('in')
            .attr({
               'aria-hidden': 'true',
               'tabindex': '-1'
            });

         $('.hidden-by-modal').removeClass('hidden-by-modal').removeAttr('aria-hidden');

         $.support.transition && this.$element.hasClass('fade') ?
            this.hideWithTransition() :
            this.hideModal();
         $('.modalwrapper').removeClass('active');
         $('[data-toggle="modal"]').button('reset');
      },

      enforceFocus: function () {
         var that = this;
         $(document).one('focusin.modal', function (e) {
            setTimeout(
               function(){
                  $(document.activeElement).find('.modal-header [tabindex]').focus();
               }, 350
            );
         })
      },

      escape: function () {
         var that = this;
         if (this.isShown && this.options.keyboard) {
            this.$element.on('keyup.dismiss.modal', function (e) {
               e.which == 27 && that.hide()
            })
         } else if (!this.isShown) {
            this.$element.off('keyup.dismiss.modal')
         }
      },

      hideWithTransition: function () {
         var that = this,
            timeout = setTimeout(function () {
               that.$element.off($.support.transition.end);
               that.hideModal()
            }, 500);

         this.$element.one($.support.transition.end, function () {
            clearTimeout(timeout);
            that.hideModal()
         })
      },

      hideModal: function () {
         var that = this;
         this.$element.hide();
         this.backdrop(function () {
            that.removeBackdrop();
            that.$element.trigger('hidden')
         })
      },

      removeBackdrop: function () {
         this.$backdrop && this.$backdrop.remove();
         this.$backdrop = null
      },

      backdrop: function (callback) {
         var that = this,
            animate = this.$element.hasClass('fade') ? 'fade' : '';

         if (this.isShown && this.options.backdrop) {
            var doAnimate = $.support.transition && animate;

            this.$backdrop = $('<div class="modal-backdrop ' + animate + '" />')
               .appendTo(document.body);

            this.$backdrop.click(
               this.options.backdrop == 'static' ?
               $.proxy(this.$element[0].focus, this.$element[0]) : $.proxy(this.hide, this)
            );

            if (doAnimate) this.$backdrop[0].offsetWidth // force reflow

            this.$backdrop.addClass('in');

            if (!callback) return;

            doAnimate ?
               this.$backdrop.one($.support.transition.end, callback) :
               callback()

         } else if (!this.isShown && this.$backdrop) {
            this.$backdrop.removeClass('in');

            $.support.transition && this.$element.hasClass('fade') ?
               this.$backdrop.one($.support.transition.end, callback) :
               callback()

         } else if (callback) {
            callback()
         }
      }
   };


   /* MODAL PLUGIN DEFINITION
    * ======================= */

   var old = $.fn.modal;

   $.fn.modal = function (option) {
      return this.each(function () {
         var $this = $(this),
            data = $this.data('modal'),
            options = $.extend({}, $.fn.modal.defaults, $this.data(), typeof option == 'object' && option);
         if (!data) $this.data('modal', (data = new Modal(this, options)));
         if (typeof option == 'string') data[option]();
         else if (options.show) data.show()
      })
   };

   $.fn.modal.defaults = {
      backdrop: true,
      keyboard: true,
      show: true
   };

   $.fn.modal.Constructor = Modal;


   /* MODAL NO CONFLICT
    * ================= */

   $.fn.modal.noConflict = function () {
      $.fn.modal = old;
      return this
   };


   /* MODAL DATA-API
    * ============== */

   $(document).on('click.modal.data-api', '[data-toggle="modal"]', function (e) {
      var $this = $(this),
         href = $this.attr('href'),
         $target = $($this.attr('data-target') || (href && href.replace(/.*(?=#[^\s]+$)/, '') ) ), //strip for ie7
         option = $target.data('modal') ? 'toggle' : $.extend({
            remote: !/#/.test(href) && href
         }, $target.data(), $this.data());

      e.preventDefault();

      $('.modal').on('shown', function () {
         $('.modal.in').focus();

         $('html').css({
            'overflow-y': 'hidden'
         });
         $('body').css({
            'overflow': 'hidden',
            'height': window.innerHeight,
            'width': '100%'
         }).addClass('styled-by-modal');
         
         setTimeout(function () {
            DS2.modalDockedButtons();
        }, 150);
      });

      $('.modal').on('hide', function (e) {
          if($(e.target).is('.modal')) {
             $('html').removeAttr('style');
             $('body').removeAttr('style').removeClass('styled-by-modal');
             $(document).scrollTop($('body').attr('data-scroll-position'));
          }
      });

      $target.modal(option).one('hidden', function () {
         $this.focus();
      });

   })
   
}(window.jQuery)









// Make 'Select' placeholder color
DS2.modSelectPlaceholder = function () {
   $('[data-default-placeholder="true"]').each(function () {
      if ($(this).is(':selected')) {
         $(this).parent('.mod-select').next('span').addClass('placeholdercolor');
      } else {
         $(this).parent('.mod-select').next('span').removeClass('placeholdercolor');
      }
   });
};

dropdownAutocomplete = function () {
   var keymap={MAP: { 91 : "COMMAND", 8 : "BACKSPACE" , 9 : "TAB" , 13 : "ENTER" , 16 : "SHIFT" , 17 : "CTRL" , 18 : "ALT" , 19 : "PAUSEBREAK" , 20 : "CAPSLOCK" , 27 : "ESC" , 32 : "SPACE" , 33 : "PAGE_UP", 34 : "PAGE_DOWN" , 35 : "END" , 36 : "HOME" , 37 : "LEFT" , 38 : "UP" , 39 : "RIGHT" , 40 : "DOWN" , 43 : "+" , 44 : "PRINTSCREEN" , 45 : "INSERT" , 46 : "DELETE", 48 : "0" , 49 : "1" , 50 : "2" , 51 : "3" , 52 : "4" , 53 : "5" , 54 : "6" , 55 : "7" , 56 : "8" , 57 : "9" , 59 : ";", 61 : "=" , 65 : "A" , 66 : "B" , 67 : "C" , 68 : "D" , 69 : "E" , 70 : "F" , 71 : "G" , 72 : "H" , 73 : "I" , 74 : "J" , 75 : "K" , 76 : "L", 77 : "M" , 78 : "N" , 79 : "O" , 80 : "P" , 81 : "Q" , 82 : "R" , 83 : "S" , 84 : "T" , 85 : "U" , 86 : "V" , 87 : "W" , 88 : "X" , 89 : "Y" , 90 : "Z", 96 : "0" , 97 : "1" , 98 : "2" , 99 : "3" , 100 : "4" , 101 : "5" , 102 : "6" , 103 : "7" , 104 : "8" , 105 : "9", 106 : "*" , 107 : "+" , 109 : "-" , 110 : "." , 111 : "/", 112 : "F1" , 113 : "F2" , 114 : "F3" , 115 : "F4" , 116 : "F5" , 117 : "F6" , 118 : "F7" , 119 : "F8" , 120 : "F9" , 121 : "F10" , 122 : "F11" , 123 : "F12", 144 : "NUMLOCK" , 145 : "SCROLLLOCK" , 186 : ";" , 187 : "=" , 188 : "," , 189 : "-" , 190 : "." , 191 : "/" , 192 : "`" , 219 : "[" , 220 : "\\" , 221 : "]" , 222 : "'"
   }};
   var currentindex={position:-1};
   if (!Array.prototype.regexIndexOf) {
      Object.defineProperty(Array.prototype, 'regexIndexOf', {
         enumerable: false,
         value: function (regex, startIndex, loop) {   
            startIndex = startIndex && startIndex > -1 ? startIndex : 0;
            for (var index = startIndex; index < this.length; index++) {
               if (this[index].toString().match(regex)) {
                  currentindex.position=index;
                  return index;
               }
            }
            if (loop) {
               for (var index = 0; index < startIndex; index++) {
                  if (this[index].toString().match(regex)) {
                     currentindex.position=index;
                     return index;
                  }
               }
            }
            return -1; 
         }
      })
    }  
   var searchElement = function (searchExp,options) {
      var regex = new RegExp("\\b" + searchExp, "gi");
      var position = options.regexIndexOf(regex, currentindex.position + 1, true);
      if (position > -1) {
         return position;
      }
      return undefined;
   }; 
   $(document).on('keydown', '.selectWrap', function (e) {
      if(e.keyCode >= 48 && e.keyCode <= 105){
         var options=[];
         var parent=$(this).parent();
         parent.find('.awd-select-list-item').each(function(){
            options.push($(this).text());      
         });        
         searchString="";
         searchString = searchString + (keymap.MAP[e.keyCode] || '');
         var position = searchElement(searchString,options);
         $(this).find('button.awd-select').html(options[position]).attr({'aria-label':options[position]});
         $(this).find('input.awd-select').attr({'value':options[position],'aria-label':options[position]});
         e.preventDefault();
         e.stopPropagation();
      }
   });
}

$(document).on('keydown', '.selectWrap', function (e) {
   var $this = $(this),
      upKey = '38',
      downKey = '40',
      hasFocus = document.activeElement.tagName.toLowerCase(),
      isClosed = $(document.activeElement).hasClass('closed'),
      isOpened = $(document.activeElement).hasClass('active');

   if (e.keyCode in keymap) {
      keymap[e.keyCode] = true;
      if(keymap[18] && keymap[40] || keymap[18] && keymap[38]) { // alt + down arrow OR alt + up arrow
         $this.find('.awd-select').click().focus();
         e.preventDefault();
      }
      if(keymap[27]) {
         $('.selectWrap button.active').click().focus();
         e.preventDefault();
      }
      if(isClosed==true){
        var list=$(this).find('.selectWrapper  li:not(.optgroup-wrapper)');        
        var selected=$(this).find('.selectWrapper  li:not(.optgroup-wrapper)').index($(this).find(".selectWrapper li[selected=selected]"));      
        if((keymap[40])&&(selected<list.length-1)) {         
               selected++;               
               $(this).find('.selectWrapper li').removeAttr('selected');
               var selectedText=$(list[selected]).attr({'selected':'selected'}).html();
               var ariaText=$(list[selected]).attr({'selected':'selected'}).text()
               $(this).find('button').attr({'aria-label':ariaText}).html(selectedText);        
               $(this).find('input').attr({'aria-label':ariaText,'value':selectedText});
               e.preventDefault();
        }        
       if((keymap[38])&&(selected>0)){           
           selected--;
           $(this).find('.selectWrapper li').removeAttr('selected');
           var selectedText=$(list[selected]).attr({'selected':'selected'}).html();
           var ariaText=$(list[selected]).attr({'selected':'selected'}).text()
           $(this).find('button').attr({'aria-label':ariaText}).html(selectedText);        
           $(this).find('input').attr({'aria-label':ariaText,'value':selectedText});
           e.preventDefault();   
      }      
   }
   }
}).keyup(function(e) {
   if (e.keyCode in keymap) {
      keymap[e.keyCode] = false;
   }
});

$(document).on('click', function (e) {
   if (!$(e.target).prop('disabled') && $(e.target).hasClass("awd-select") && $(e.target).next().find('.awd-select-list').is(':hidden')) {
      $(this).removeClass('active').addClass('closed').next().find('.awd-select-list').slideUp(200);
      $(e.target).removeClass('closed').addClass('active').attr('aria-expanded', 'true').next().find('.awd-select-list').slideDown(200, function(){

         var winHeight   = ($(window).innerHeight()),
            buttonHeight = ($(e.target).outerHeight()),
              butTopPos  = ($(this).offset().top - $(e.target).outerHeight() ),
              listTopPos = ($(e.target).next().find('.awd-select-list').offset().top ),
              listHeight = ($(e.target).next().find('.awd-select-list').outerHeight()),
              listBotPos = (listTopPos + listHeight),
               scrollPos = $(document).scrollTop()
             mustScroll1 = butTopPos - scrollPos,
             mustScroll2 = winHeight - mustScroll1,
             mustScroll3 = mustScroll2 - listHeight,
             mustScroll4 = mustScroll3 - buttonHeight;

         if(mustScroll4 <= 20){
            $('html,body').animate({
               scrollTop: listBotPos - winHeight +20
            }, 1000);            
         }
        
         if($(this).find('.awd-select-list-item[aria-selected="true"]').attr('aria-selected') == "true"){
            $(this).find('.awd-select-list-item[aria-selected="true"]').attr({'aria-selected':'true','selected':'selected'}).focus();
         }
         else{
            $(this).find('.awd-select-list-item:first-child').attr({'aria-selected':'true','selected':'selected'}).focus();
         }
      
      });
      e.preventDefault();
   }
   else if ($(e.target).hasClass('awd-select') && $(e.target).next().find('.awd-select-list').is(':visible')) {
      $('.awd-select').removeClass('active').addClass('closed').attr('aria-expanded', 'false').next().find('.awd-select-list').slideUp(200);
      e.preventDefault();
   }
   else if(!$(e.target).hasClass('awd-select')){
      $('.awd-select.active').next().find('.awd-select-list-item[aria-selected="true"]').click();
   }
   else {
      // else code
   }
});




// FACEBOOK LIKE BUTTON
DS2.btnFacebook = function () {
   var fb = '//www.facebook.com/plugins/like.php?href=';
   var canonical = escape($('link[rel=canonical]').attr('href'));
   var fbParam = '&amp;width=75&amp;height=21&amp;colorscheme=light&amp;layout=button_count&amp;action=like&amp;show_faces=false&amp;send=false';

   $('.facebook-like').html('<iframe id="facebookFrame" src="' + fb + canonical + fbParam + '" scrolling="no" frameborder="0" style="border:none; overflow:hidden; width:auto; height:21px;" allowTransparency="true"></iframe>');
   $('iframe .pluginConnectButtonLayoutRoot').css({
      'background-color': 'black !important'
   })
};

// STAR RATING COMPONENT

DS2.starRatings = function () {
    $('.starrating-wrap[data-rating-avg]').each(function(){ 
        var ratingEachCompo  = $(this),
            eachCompoPercntg = ratingEachCompo.attr('data-rating-avg'),
            starsToFilled = eachCompoPercntg / 20,      // Divided Entire Percentage to per Star Instance
            remainStr = starsToFilled.toFixed(2),       // Restrict the whole percentage to 2 digits after Decimal
            fullStars = Math.floor(starsToFilled),      // Round down the number of full stars that are going to be filled with 100%
            remainStrEnd = remainStr.split('.')[1];     // Get the 2 digit percentage after decimal to fill the partial Star if there's any

        $(ratingEachCompo).find('.starrating li>i>i').removeAttr('data-fill-width style');  // Removing Previous All Values
        $(ratingEachCompo).find('.starrating li').slice(0, fullStars).find('>i>i').attr('data-fill-width', '100'); // Filling Full Star(s)
        $(ratingEachCompo).find('.starrating li').eq(fullStars).find('>i>i').attr('data-fill-width', remainStrEnd); // Partial Star
        $(ratingEachCompo).find('.final-rating').text(starsToFilled.toFixed(1)); 

        $(ratingEachCompo).find('>.hidden-spoken')
            .text('Average star rating of this product is ' + starsToFilled.toFixed(1) + ' based on ' + $(ratingEachCompo).attr('data-total-reviews') +' reviews'); 

        $(ratingEachCompo).find('.starrating li').each(function(){            
            // Setting the width using Inline Style attr as previously set in data-fill-width in each span ele
            var dataWidth = $(this).find('>i>i').attr('data-fill-width');
            $(this).find('>i>i').css('width', dataWidth + '%');   
        });

    });
};

(function (old) {
   $.fn.attr = function () {
      if (arguments.length === 0) {
         if (this.length === 0) {
            return null;
         }

         var obj = {};
         $.each(this[0].attributes, function () {
            if (this.specified) {
               obj[this.name] = this.value;
            }
         });
         return obj;
      }

      return old.apply(this, arguments);
   };
})($.fn.attr)
